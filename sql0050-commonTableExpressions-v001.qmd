# <yrChapterNumber>34. </yrChapterNumber> Common Table Expressions (CTE)

## SQL Common Table Expressions (CTE)

You can also see the following to learn about this important feature of modern SQL:

<https://learnsql.com/blog/what-is-common-table-expression/>

--- 

## CTE with one or more SELECTs

"Common Table Expressions (CTE)" are designed to make complex queries easier to 
read and think about. Instead of embedding subqueries in the middle of 
an outer query CTEs allow you to several SELECT statements in an organized
way. These SELECT statements are named and can be referred to as if they
were tables inside of the main query. See below for exmaples.

(Note - these examples work but were generated by chatgpt. I should modify
these to make them more interesting, but the current code works to get 
across the main ideas of CTEs)

The following is the database that we will be using to demo the CTEs below.


::: {.callout-tip collapse="false"}
##### Click here to hide/show this section
{{< include yrBooksDatabase-common-v001.qmd >}}
:::


**Goal:** Show each author's full name, how many books they've written, and a list with one row per book and a total count included.

```{r}
sqldf("
WITH author_titles_cte AS (
  SELECT 
    a.au_id,
    a.au_fname || ' ' || a.au_lname AS author,
    t.title_name
  FROM authors a
  JOIN title_authors ta ON a.au_id = ta.au_id
  JOIN titles t ON ta.title_id = t.title_id
),
author_book_counts AS (
  SELECT au_id, COUNT(*) AS book_count
  FROM author_titles_cte
  GROUP BY au_id
)
SELECT 
  at.author,
  at.title_name,
  abc.book_count
FROM author_titles_cte at
JOIN author_book_counts abc ON at.au_id = abc.au_id
ORDER BY abc.book_count DESC, at.author, at.title_name
")
```

---

**Goal:** Find authors who have written books with more than 10,000 sales and show the average sales per author.

```{r}
sqldf("
WITH high_selling_titles AS (
  SELECT title_id, sales
  FROM titles
  WHERE sales > 10000
),
authors_of_hits AS (
  SELECT a.au_id, a.au_fname || ' ' || a.au_lname AS author, t.sales
  FROM high_selling_titles h
  JOIN title_authors ta ON h.title_id = ta.title_id
  JOIN authors a ON ta.au_id = a.au_id
  JOIN titles t ON h.title_id = t.title_id
)
SELECT author, AVG(sales) AS avg_sales
FROM authors_of_hits
GROUP BY author
ORDER BY avg_sales DESC
")
```

---

## CTE Referring to an Earlier CTE

**Goal:** Find top-earning books and list their authors. Top-earning = (sales × price) > 500,000.



```{r}
sqldf("
WITH book_earnings AS (
  SELECT title_id, title_name, sales * price AS revenue
  FROM titles
),
top_books AS (
  SELECT title_id, title_name, revenue
  FROM book_earnings
  WHERE revenue > 500000
),
top_books_authors AS (
  SELECT tb.title_name, tb.revenue, a.au_fname || ' ' || a.au_lname AS author
  FROM top_books tb
  JOIN title_authors ta ON tb.title_id = ta.title_id
  JOIN authors a ON ta.au_id = a.au_id
)
SELECT * FROM top_books_authors
ORDER BY revenue DESC
")
```


## Recursive CTEs

This is a more advanced topic. 
See here for info on how to use.
<https://learnsql.com/blog/sql-recursive-cte/>

The following is an example from the books database:

**Goal:** Given an author, find all other authors who co-authored any book with them, directly or through a chain of co-authors.

Let’s assume we start from author A03.

```r
sqldf("
  WITH RECURSIVE coauthors_cte(au_id, coauthor_id, level) AS (
    -- Anchor: Get direct co-authors of A03
    SELECT ta1.au_id, ta2.au_id, 1
    FROM title_authors ta1
    JOIN title_authors ta2 ON ta1.title_id = ta2.title_id
    WHERE ta1.au_id = 'A03' AND ta2.au_id != 'A03'
  
    UNION
  
    -- Recursive: Get co-authors of the previous level
    SELECT c.coauthor_id, ta2.au_id, level + 1
    FROM coauthors_cte c
    JOIN title_authors ta1 ON c.coauthor_id = ta1.au_id
    JOIN title_authors ta2 ON ta1.title_id = ta2.title_id
    WHERE ta2.au_id != c.coauthor_id
  )
  SELECT DISTINCT coauthor_id
  FROM coauthors_cte
  ORDER BY coauthor_id;
")
```



<!-- YR - OLD STUFF

Common Table Expressions (CTEs) provide a way to create named temporary result sets that exist only within the scope of a single SQL statement. CTEs make complex queries more readable by breaking them into logical, named components.

CTEs are very similar to using a subquery in the FROM clause but are 
much more readable.


## Basic Syntax

```{.sql}
WITH cte_name AS (
    SELECT column1, column2
    FROM table
    WHERE condition
)
SELECT *
FROM cte_name;
```

CTEs are defined using the `WITH` keyword, followed by a name and the query that defines the temporary result set. You can then reference this named result set in your main query.

## Multiple CTEs

You can define multiple CTEs in a single query:

```{.sql}
WITH cte1 AS (
    SELECT * FROM table1 WHERE condition1
),
cte2 AS (
    SELECT * FROM table2 WHERE condition2
)
SELECT *
FROM cte1
JOIN cte2 ON cte1.id = cte2.id;
```

## Recursive CTEs

Recursive CTEs are a powerful feature for handling hierarchical or graph-structured data that would be difficult to query using standard SQL. They're especially useful for:

- Organizational hierarchies (employee → manager relationships)
- File/folder structures
- Network paths
- Family trees
- Any data with parent-child relationships

### How Recursive CTEs Work

A recursive CTE works by:

1. Starting with a "base case" (anchor member) query that returns initial row(s)
2. Running a "recursive case" that references the CTE itself
3. Combining results with UNION ALL (typically)
4. Repeating steps 2-3 until no new rows are returned

Think of it like a loop that builds the result set iteratively.

### Basic Syntax

```{.sql}
WITH RECURSIVE cte_name AS (
    -- Base case: initial query that doesn't reference the CTE
    SELECT columns FROM table WHERE condition
    
    UNION ALL
    
    -- Recursive case: references the CTE itself to build next iteration
    SELECT t.columns
    FROM table t
    JOIN cte_name c ON t.parent_id = c.id
    -- Optional: WHERE clause to prevent infinite recursion
)
SELECT * FROM cte_name;
```

### Example: Employee Hierarchy

Consider a table of employees where each employee has a manager (who is also an employee):

```{.sql}
-- Table structure
CREATE TABLE employees (
    id INTEGER PRIMARY KEY,
    name TEXT,
    manager_id INTEGER NULL
);

-- Sample data: CEO has NULL manager_id
INSERT INTO employees VALUES
(1, 'CEO', NULL),
(2, 'VP Sales', 1),
(3, 'VP Marketing', 1),
(4, 'Sales Manager East', 2),
(5, 'Sales Manager West', 2),
(6, 'Sales Rep 1', 4),
(7, 'Sales Rep 2', 4);

-- Recursive CTE to find all employees under VP Sales (id=2)
WITH RECURSIVE org_chart AS (
    -- Base case: Start with VP Sales
    SELECT id, name, manager_id, 0 AS level
    FROM employees
    WHERE id = 2
    
    UNION ALL
    
    -- Recursive case: Find all direct reports of each employee in org_chart
    SELECT e.id, e.name, e.manager_id, oc.level + 1 AS level
    FROM employees e
    JOIN org_chart oc ON e.manager_id = oc.id
)
-- Final query using the CTE
SELECT id, name, level, 
       SUBSTR('    ', 1, level*4) || name AS hierarchical_view
FROM org_chart
ORDER BY level, name;
```

This query returns:

```
id | name            | level | hierarchical_view
------------------------------------------------------------------------------------
2  | VP Sales        | 0     | VP Sales
4  | Sales Manager East | 1  |     Sales Manager East
5  | Sales Manager West | 1  |     Sales Manager West
6  | Sales Rep 1     | 2     |         Sales Rep 1
7  | Sales Rep 2     | 2     |         Sales Rep 2
```

### How the Recursion Unfolds

1. **Iteration 0 (Base Case):**
   - Returns VP Sales (id=2)
   
2. **Iteration 1:**
   - Joins employees who have manager_id=2
   - Adds Sales Manager East and West (ids 4 and 5)
   
3. **Iteration 2:**
   - Joins employees who have manager_id=4 or 5
   - Adds Sales Rep 1 and 2 (ids 6 and 7)
   
4. **Iteration 3:**
   - No employees have manager_id=6 or 7
   - No new rows, recursion stops

### Preventing Infinite Recursion

If your data has cycles (e.g., A manages B, B manages C, C manages A), you need safeguards:

```{.sql}
WITH RECURSIVE org_chart AS (
    -- Base case
    SELECT id, name, manager_id, 0 AS level, id AS path
    FROM employees
    WHERE id = 2
    
    UNION ALL
    
    -- Recursive case with cycle prevention
    SELECT e.id, e.name, e.manager_id, oc.level + 1, oc.path || ',' || e.id
    FROM employees e
    JOIN org_chart oc ON e.manager_id = oc.id
    WHERE oc.level < 10  -- Depth limit
      AND instr(',' || oc.path || ',', ',' || e.id || ',') = 0  -- Path check for cycles
)
SELECT * FROM org_chart;
```

### SQLite Implementation Notes

SQLite's implementation of recursive CTEs follows the ANSI SQL standard closely with some specific behaviors:

- The `RECURSIVE` keyword is required (consistent with ANSI standard)
- The recursive part must connect to the non-recursive part with either `UNION`, `UNION ALL`, `INTERSECT`, or `EXCEPT`
- SQLite imposes a default recursion limit of 1000, which can be modified using the `PRAGMA recursive_triggers` setting
- Each iteration must return at least one row, or recursion stops

CTEs can significantly improve query readability and maintenance, especially for complex queries involving multiple steps or self-joins.

-->