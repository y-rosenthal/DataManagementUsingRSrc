---
format:
  html:
    toc-expand: 1
    toc-depth: 4
---

# <yrChapterNumber></yrChapterNumber> Database Questions (and Answers)

```{r}
#| echo: false
#| output: false

# dataframes should display in the following width without "wrapping"
options(width = 999)
```

The questions below require you to write SQL code. 
The questions refer to the 
[Books Database](sql0014-theBooksDatabase-v001.html#yrBooksDatabase)
which is fully described fully on
[this page](sql0014-theBooksDatabase-v001.html#yrBooksDatabase). However
for your convenience, the info from that page was also copied below.

The rows of data shown for the various tables 
is the data as it appears in the 
datatabase today. However, with any database, you must consider that 
the data might change in the future. For example, new
rows might be added, prices might change, data may be removed, etc.

The code in the 
answer for each question MUST WORK even if data were to be different
than the current data in the database
(i.e. do NOT write the answer such that it 
only works for the existing data - the code should work no matter
what data is in the tables as long as the tables continue to have 
the same structure as they do now.

<!-- 
  NOTE in the following .callout
  that the collapse="false" instead of "true" because
  the mermaid in the include doesn't get initialized correctly
  if collapse="true". There are workarounds for this using JavaScript
  but I don't want to do that now. The solution for now is to start
  with the section open and allow the user to collapse it. 
-->

::: {.callout-tip collapse="false"}
##### Click here to hide/show this section
{{< include yrBooksDatabase-common-v001.qmd >}}
:::


```{=html}
<!-- This html/css/javascript code chunk adds SHOW ALL ANSWERS
     and HIDE ALL ANSWERS buttons -->

<div class="answer-controls">
  <button id="show-all-answers" class="btn btn-primary">Show All Answers</button>
  <button id="hide-all-answers" class="btn btn-secondary">Hide All Answers</button>
</div>

<style>
.answer-controls {
  margin: 20px 0;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 5px;
  text-align: center;
}

.answer-controls button {
  margin: 0 5px;
  padding: 8px 15px;
  cursor: pointer;
}

.btn-primary {
  background-color: #0d6efd;
  color: white;
  border: none;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Debug information
  console.log("Toggle buttons script loaded");
  
  // Show All Answers button click handler
  document.getElementById('show-all-answers').addEventListener('click', function() {
    console.log("Show All clicked");
    
    // Find all collapsed callout contents
    const collapsedContents = document.querySelectorAll('.callout-note .callout-collapse.collapse:not(.show)');
    console.log("Found", collapsedContents.length, "collapsed elements");
    
    // Click their toggle buttons
    collapsedContents.forEach(function(content) {
      // Get the callout ID number from the content ID
      const calloutId = content.id.split('-')[1];
      
      // Find the toggle button for this specific callout
      const toggleButton = document.querySelector(`.callout-btn-toggle [data-bs-target="#callout-${calloutId}-contents"]`);
      if (toggleButton) {
        console.log("Clicking toggle for callout", calloutId);
        toggleButton.click();
      } else {
        // Fallback - try to find the toggle button in ancestor elements
        const parentCallout = content.closest('.callout');
        if (parentCallout) {
          const btn = parentCallout.querySelector('.callout-btn-toggle');
          if (btn) {
            console.log("Clicking fallback toggle for callout", calloutId);
            btn.click();
          }
        }
      }
    });
  });
  
  // Hide All Answers button click handler
  document.getElementById('hide-all-answers').addEventListener('click', function() {
    console.log("Hide All clicked");
    
    // Find all expanded callout contents
    const expandedContents = document.querySelectorAll('.callout-note .callout-collapse.collapse.show');
    console.log("Found", expandedContents.length, "expanded elements");
    
    // Click their toggle buttons
    expandedContents.forEach(function(content) {
      // Get the callout ID number from the content ID
      const calloutId = content.id.split('-')[1];
      
      // Find the toggle button for this specific callout
      const toggleButton = document.querySelector(`.callout-btn-toggle [data-bs-target="#callout-${calloutId}-contents"]`);
      if (toggleButton) {
        console.log("Clicking toggle for callout", calloutId);
        toggleButton.click();
      } else {
        // Fallback - try to find the toggle button in ancestor elements
        const parentCallout = content.closest('.callout');
        if (parentCallout) {
          const btn = parentCallout.querySelector('.callout-btn-toggle');
          if (btn) {
            console.log("Clicking fallback toggle for callout", calloutId);
            btn.click();
          }
        }
      }
    });
  });
  
  // Debug log to show what elements are available in the document
  console.log("All callout elements:", document.querySelectorAll('.callout').length);
  console.log("All callout-collapse elements:", document.querySelectorAll('.callout-note .callout-collapse').length);
  console.log("All toggle buttons:", document.querySelectorAll('.callout-btn-toggle').length);
  console.log("All expanded callouts:", document.querySelectorAll('.callout-note .callout-collapse.collapse.show').length);
  console.log("All collapsed callouts:", document.querySelectorAll('.callout-note .callout-collapse.collapse:not(.show)').length);
});
</script>
```



### Single Table queries

#### Question 1

List all books (title and number sold) that sold more than 100 copies. List the books with the most sales at the top. 

Using the data shown above, the output should be:

```{r q100}
#| echo: false
sqldf("
		select title_name, sales
		from titles
		where sales > 1000
		order by sales desc;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q100"
```
:::



#### Question 2

List all authors who are live either in NY or CA and whose last name begins with a "K". 

Using the data shown above, the output should be:

```{r q200}
#| echo: false
sqldf("
  -- NOTE: 
  --  parentheses are required in the WHERE 
  --  since AND is done before OR by default)
	select au_fname, au_lname
	from authors
	where (state = 'NY' or state='CA')  and  substr(au_lname,1,1) = 'K';   
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q200"
```
:::



#### Question 3

List the first and last names of all authors whose last name starts with a letter from A through J  
(HINT: In the where clause, make sure that the first letter of the last name is both  >="A" and also <"K")
(HINT: another possible solution is to use the LIKE several times - once for A, once for B, once for C, etc up to J. Each LIKE should be separated from the others by OR's)

Using the data shown above, the output should be:

```{r q300-ans1}
#| echo: false

sqldf("
		select au_fname, au_lname
		from authors
		where substr(au_lname,1,1) >= 'A' and substr(au_lname,1,1) < 'K';
")
```

```{r q300-ans2}
#| include: false

sqldf("
	select au_fname, au_lname
	from authors
	where 	au_lname like 'A%' or au_lname like 'B%' or au_lname like 'C%' or 
                          au_lname like 'D%' or au_lname like 'E%' or au_lname like 'F%' or 
                          au_lname like 'G%' or au_lname like 'H%' or au_lname like 'I%' or 
                          au_lname like 'J%'
")
```

::: {.callout-note collapse="true"}
##### Click for answer*
**ONE ANSWER:**
```{r}
#| output: false
#| ref.label: "q300-ans1"
```

**ANOTHER ANSWER:**
```{r}
#| output: false
#| ref.label: "q300-ans2"
```
:::



#### Question 4

For each author, show their first initial, followed by a period and a space, followed by their last name. In the 2nd column show the author's state. Show the column heading for the first column as 'AuthorName'.  Order the results in alphabetical order based on the full name of the person.

Using the data shown above, the output should be:

```{r q400}
#| echo: false

sqldf("select substr(au_fname,1,1) || '. ' || au_lname  as   'AuthorName',  state
	     from authors
    	 order by au_lname, au_fname;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q400"
```
:::


#### Question 5

Show the titles of all books. Also show the length of the title, i.e. how many characters, including spaces and punctuation. Display the 2nd column with the name 'TitleLength'.  Sort the output so that the shortest titles are listed first. If two titles are the same length then sort those titles alphabetically. 

    Using the data shown above, the output should be:

```{r q500}
#| echo: false

sqldf("
		select title_name, length(title_name) as 'TitleLength'
		from titles
		order by length(title_name), title_name;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q500"
```
:::



### Single table queries with aggregate functions but no “group by”  (i.e. these will return EXACTLY one row for each query). 

<!----------------------------------------------------------->

#### Question 6

List the average price of all books.

Using the data shown above, the output should be:

```{r q600}
#| echo: false

sqldf("
		select avg(price) 
		from titles;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q600"
```
:::


#### Question 7

List the average price of history books.

Using the data shown above, the output should be:

```{r q700}
#| echo: false

sqldf("
		select avg(price) 
		from titles
		where type = 'history';
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q700"
```
:::



#### Question 8

List the number of pages in the longest and shortest books (don't list the actual title of the book).

Using the data shown above, the output should be:


```{r q800}
#| echo: false

sqldf("
		select min(pages) , max(pages) from titles
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q800"
```
:::


### Single table queries with calculated values


#### Question 9

List the title_name and total revenue for each book. (Revenue for a book is the number sold times the price of the book.)

Using the data shown above, the output should be:

```{r q900}
#| echo: false

sqldf("
		select title_name,   sales * price   as   'Total  Revenue'
		from titles;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q900"
```
:::



#### Question 10

List title of each book and the sale price for the book where the sale price is 10% off of the original price.

Using the data shown above, the output should be:


```{r q1000}
#| echo: false
sqldf("
		select title_name, price * 0.90 as 'Sale Price'
		from titles;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1000"
```
:::

## Single table queries with “group by”. 

These can use aggregate functions but will return at most one row in the output for each “group” of rows as defined in the “group by”


#### Question 11

For each "type" of book (e.g. biography, children, etc) list the number of pages in the shortest book of that type and the number of pages in the longest book of that type. Sort the results alphabetically by the type of book. 

Using the data shown above, the output should be:


```{r q1100}
#| echo: false

sqldf("
	select type, min(pages) AS 'Length of Shortest' ,  max(pages)  as 'Length of Longest'
		from titles
		group by type
		order by type;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1100"
```
:::



#### Question 12

List the types of books (e.g. history, biography, etc) and the average price of those books for which the average price of books in that category is at least $12.00.

Using the data shown above, the output should be:

```{r q1200}
#| echo: false

sqldf("
		select type, avg(price)
		from titles
		group by type
		having avg(price) >= 12;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1200"
```
:::


#### Question 13

For each type of book (e.g. biography, children, etc), show the number of those books that are 450 pages or longer. The column heading should be '# of long books'. If there are no titles of a particular type that are so long, then don't show that type at all.

Using the data shown above, the output should be:

```{r q1300}
#| echo: false
 
sqldf("
		select type, count(*) as '# of long books'
		from titles
		where pages >= 450
		group by type;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1300"
```
:::



#### Question 14

Modify the answer to the previous question so that only those types for which there are at least 2 long books are displayed.

Using the data shown above, the output should be:


```{r q1400}
#| echo: false

sqldf("
		select type, count(*) as '# of long books'
		from titles
		where pages >= 450
		group by type
		having count(*) >= 2        -- this is the only change.
")
```

::: {.callout-note collapse="true"}
##### Click for answer
NOTE: the only change to the above answer is the addition of the HAVING clause at the end.
```{r}
#| output: false
#| ref.label: "q1400"
```
:::


## Multiple table queries with group by 


#### Question 15

For each publisher, list the name of the publisher and total 
number of pages that the publisher has published in all their books 
(ie. add up all the pages in all books for each publisher). 
Show the publishers who have published the most pages at the top 
of the result list.

Using the data shown above, the output should be:

```{r q1500}
#| echo: false

sqldf("
		select pub_name, sum(pages)
		from publishers join titles on publishers.pub_id = titles.pub_id
		group by pub_name
		order by sum(pages) desc;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1500"
```
:::



#### Question 16

Modify the previous query so that only publishers who have published at least 1250 pages will show up.

Using the data shown above, the output should be:

```{r q1600}
#| echo: false

sqldf("
		select pub_name, sum(pages)
		from publishers join titles on publishers.pub_id = titles.pub_id
		group by pub_name
		having  sum(pages)  >= 1250      -- THIS LINE IS THE ONLY CHANGE 
		order by sum(pages) desc;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1600"
```
:::


#### Question 17

List each publisher's name and the numbers of pages in their longest and shortest books. Sort the results by the publisher's name.

Using the data shown above, the output should be:

```{r q1700}
#| echo: false

sqldf("
		select pub_name, min(pages) AS 'Length of Shortest' ,  max(pages)  as 'Length of Longest'
		from titles join publishers on titles.pub_id = publishers.pub_id
		group by pub_name
		order by pub_name;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1700"
```
:::


## Multiple table queries


#### Question 18

List the authors first and last names, the author's state, the title name, the publisher name and the publishers state for all books.

Using the data shown above, the output should be:


```{r q1800}
#| echo: false

sqldf("
	select au_fname, au_lname, authors.state, title_name, pub_name, publishers.state
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	                      join publishers on publishers.pub_id = titles.pub_id;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1800"
```
:::


#### Question 19

List the title, number of pages, authors first and last names and author's state for all books that are longer than 150 pages and whose author lives in NY or CA.

Using the data shown above, the output should be:


```{r q1900}
#| echo: false

sqldf("
	select title_name, pages, au_fname, au_lname, authors.state 
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	where pages > 150 and   (state = 'NY'  or   state = 'CA') ;  -- (parentheses ARE necessary since by default AND is done before OR)
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q1900"
```
:::


#### Question 20

List the authors first and last names, the author's state, the title name, the publisher name and the publishers state only for those books where the author and publisher are from the same state. (HINT: specify authors.state [note: there is a period between author and state] in the criteria for the publisher's state).

Using the data shown above, the output should be:

```{r q2000}
#| echo: false

sqldf("
	select au_fname, au_lname, authors.state, title_name, pub_name, publishers.state
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	                      join publishers on publishers.pub_id = titles.pub_id
                where authors.state = publishers.state;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2000"
```
:::


#### Question 21

List the title and authors of all books published by "Abatis Publishers" 
sort the results in alphabetical order by title and then by the 
au_order column. Do NOT show that au_order column in the output.

Using the data shown above, the output should be:


```{r q2100}
#| echo: false

sqldf("
	select au_fname, au_lname, title_name, pub_name
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	                      join publishers on publishers.pub_id = titles.pub_id
	where pub_name = 'Abatis Publishers'
	order by title_name, au_order;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2100"
```
:::



#### Question 22

List the publisher name, author name, and title name for all books that have at least 100 pages and that sold at least 200 copies. Sort the results in alphabetical order first by publisher and then by author.

Using the data shown above, the output should be:

```{r q2200}
#| echo: false

sqldf("
  select pub_name, au_fname, au_lname, title_name
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	                      join publishers on publishers.pub_id = titles.pub_id
                where   pages >= 100 and sales >= 200
	order by  pub_name,   au_lname,  au_fname;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2200"
```
:::



#### Question 23

List authors first and last names and the titles they wrote for publishers whose name (ie. the publisher's name) begins with "A", "B" or "C".
Sort the rows in alphabetical order by the publisher. For rows for 
the same publisher, sort the rows alphabetically by the names of the 
authors.

Using the data shown above, the output should be:

```{r}
#| include: false

#-----------------------------------------------------------------.
# Three different answers.
# The only difference between the answers is the WHERE clauses.
#-----------------------------------------------------------------.

# Here we setup the 3 different answers. 
# We will run the answers below.

select_and_from = "	select au_fname, au_lname, title_name, pub_name
	from authors join title_authors on authors.au_id = title_authors.au_id 
	                      join titles on title_authors.title_id = titles.title_id 
	                      join publishers on publishers.pub_id = titles.pub_id"

where1 = "  where substr(pub_name, 1,1) IN ('A','B','C')"
where2 = 
"	where substr(pub_name, 1,1) = 'A' or 
        substr(pub_name, 1,1) = 'B' or
	           substr(pub_name, 1,1) = 'C'"
where3 = "	where pub_name like 'A%'  or  pub_name like 'B%'  or pub_name like 'C%'"

order_by = "  order by pub_name, au_lname, au_fname"

answer1 = paste0(select_and_from, where1, order_by, sep="\n")
answer2 = paste0(select_and_from, where2, order_by, sep="\n")
answer3 = paste0(select_and_from, where3, order_by, sep="\n")
```

```{r q2300-ans1}
#| echo: false

sqldf(answer1)
```

::: {.callout-note collapse="true"}
##### Click for answer
Three different answers.  
The only differences between the answers are the WHERE clauses.

##### Answer 1

```{r}
#| echo: false

cat(answer1)
```

```{r}
#| echo: false
#| ref.label: "q2300-ans1"
```

##### Answer 2

```{r}
#| echo: false

cat(answer2)
```

```{r}
#| echo: false

sqldf(answer2)
```

##### Answer 3

```{r}
#| echo: false

cat(answer3)
```

```{r}
#| echo: false

sqldf(answer3)
```
:::



#### Question 24

List the  publisher name, author's name and phone number for all authors that have written books for the publisher's whose name begins with a letter from A through J.  (HINT: specify the publisher's name twice but only show one of them. In the criteria for one of them list >="A" and in the criteria for the other list <"K").

Using the data shown above, the output should be:


```{r q2400}
#| echo: false

sqldf("
		select pub_name, au_fname, au_lname, phone
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
	                	      join publishers on publishers.pub_id = titles.pub_id
		where substr(pub_name,1,1) >= 'A' and substr(pub_name,1,1) < 'K';
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2400"
```
:::




#### Question 25

List the titles of all books and the number of authors for the book (NOT the actual author names). Sort the results so that the books with the most authors appear on top. All books that have the same number of authors should be listed in alphabetical order.

Using the data shown above, the output should be:

```{r q2500}
#| echo: false

sqldf("
		select title_name, count(*) as 'Number of Authors'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
		group by titles.title_id, title_name
		order by count(*) desc, title_name;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2500"
```
:::


#### Question 26

List the titles of all books that have 2 or more authors and that are longer than 50 pages.

Using the data shown above, the output should be:

```{r q2600}
#| echo: false

sqldf("
		select title_name, count(*) as 'Number of Authors'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
		where pages >= 50
		group by titles.title_id, title_name
		having count(*) >= 2
		order by count(*) desc, title_name;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2600"
```
:::


#### Question 27

List all publishers and the number of books that the publisher has published (not the actual titles, just the number of books). Sort the list so that the publisher with the most books appears on top.

Using the data shown above, the output should be:

```{r q2700}
#| echo: false

sqldf("
    select pub_name, count(*) as '# of Books'
		from titles join publishers on publishers.pub_id = titles.pub_id
		group by publishers.pub_id, pub_name
		order by count(*) desc;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2700"
```
:::



#### Question 28

List the publisher name and total revenue for each for each publisher. (Total revenue for a publisher is the total revenue for all books published by that publisher. Revenue for a book is the number sold times the price of the book.)

Using the data shown above, the output should be:

```{r q2800}
#| echo: false

sqldf("
		select pub_name, sum(sales * price) as 'Total Revenue'
		from titles join publishers on publishers.pub_id = titles.pub_id
		group by publishers.pub_id, pub_name	;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2800"
```
:::


#### Question 29

Modify the previous query to only list those publishers who have at least ten thousand dollars in total revenue.

Using the data shown above, the output should be:


```{r q2900}
#| echo: false

sqldf("
		select pub_name, sum(sales * price) as 'Total Revenue'
		from titles join publishers on publishers.pub_id = titles.pub_id
		group by publishers.pub_id, pub_name	;
		having sum(sales * price) >= 10000;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q2900"
```
:::


#### Question 30

List the title and author of each book. For each author for a particular book, list the amount of the "advance" that (s)he got for that book.

Using the data shown above, the output should be:

```{r q3000}
#| echo: false

sqldf("
		select title_name, au_fname, au_lname, advance
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
	                	      join royalties on royalties.title_id = titles.title_id;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3000"
```
:::


#### Question 31

List the title and author of each book. For each author for a particular book, list the total amount in royalties that (s)he got for that book. 
Hint: the royalty dollars for a particular book is the "price" times the "sales" times the "royalty_rate" times the "royalty_rate". Sort the results so that the authors who made the most royalty dollars are listed at the top. (NOTE: make sure to read the database description at the top of this document to understand the fields ROYALTIES.ROYALTY_RATE and the field TITLE_AUTHORS.royalty_rate).

Using the data shown above, the output should be:


```{r q3100}
#| echo: false

sqldf("
		select title_name, au_fname, au_lname, royalty_rate * royalty_rate * sales * price as  'Total Royalties for Author'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
	                	      join royalties on royalties.title_id = titles.title_id;		")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3100"
```
:::


#### Question 32

List the name of each author and the total amount of royalty dollars that they received for all of their books (name this column “RoyaltyDollars”).  Hint: the royalty dollars for a particular book is the "price" times the "sales" times the "royalty_rate" times the "royalty_rate". Sort the results so that the authors who made the most royalty dollars are listed at the top. 

Using the data shown above, the output should be:

```{r q3200}
#| echo: false

sqldf("
		select au_fname, au_lname, sum(royalty_rate * royalty_rate * sales * price)  as  'Total Royalties for Author'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
	                	      join royalties on royalties.title_id = titles.title_id
		group by authors.au_id, au_fname, au_lname
		order by sum(royalty_rate * royalty_rate * sales * price)  desc;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3200"
```
:::


#### Question 33

Modify the query from the previous question so that the list only includes authors who made more than $50,000.00 in royalties.

Using the data shown above, the output should be:

```{r q3300}
#| echo: false

sqldf("
		select au_fname, au_lname, sum(royalty_rate * royalty_rate * sales * price)  as  'Total Royalties for Author'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
	                	      join royalties on royalties.title_id = titles.title_id
		group by authors.au_id, au_fname, au_lname
		having sum(royalty_rate * royalty_rate * sales * price) > 50000
		order by sum(royalty_rate * royalty_rate * sales * price)  desc;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3300"
```
:::


<!----------------------------------------------------------->

## Subqueries, outer joins, unions and other stuff ...

<!----------------------------------------------------------->

#### Question 34

Show the title names  and number of pages for those books that are longer than (ie.  more pages) the average length of all books.

Using the data shown above, the output should be:

```{r q3400}
#| echo: false

sqldf("
	select title_name , pages
	from titles
	where pages >= (select avg(pages) from titles);
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3400"
```
:::



#### Question 35

Show the publisher's name and number of authors who have written books for that publisher:

Using the data shown above, the output should be:

```{r q3500}
#| echo: false

sqldf("
		select pub_name, count(DISTINCT authors.au_id) as '# of authors'
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
		                      join publishers on publishers.pub_id = titles.pub_id
		group by pub_id, pub_name;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3500"
```
:::

		

#### Question 36

Show the pub_name and the number of titles published by that publisher. Only include publishers for whom at least 5 authors have worked. 

Using the data shown above, the output should be:

```{r q3600}
#| echo: false

sqldf("
	select pub_name, count(*) as 'Number of Titles'
	from publishers as pub1 join titles on pub1.pub_id = titles.pub_id
	group by pub1.pub_id, pub_name
	having   5 <= (	select count(DISTINCT authors.au_id)
		from authors join title_authors on authors.au_id = title_authors.au_id 
		                      join titles on title_authors.title_id = titles.title_id 
		                      join publishers as pub2 on pub2.pub_id = titles.pub_id
		where pub2.pub_id = pub1.pub_id ) ;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3600"
```
:::



#### Question 37

Show the names of publishers who did not publish any books (I guess they are just getting started  )

Using the data shown above, the output should be:


```{r q3700-ansSubquery}
#| echo: false

sqldf("
	select pub_name 
	from publishers  as   pub1
	where not exists
		( select * 
		from publishers  as pub2  join titles on pub2.pub_id = titles.pub_id
		where pub2.pub_id = pub1.pub_id )
")
```

```{r q3700-ansLeftJoin}
#| include: false

sqldf("
	select pub_name from publishers left join titles on publishers.pub_id = titles.pub_id
	where title_id is NULL
")
```


::: {.callout-note collapse="true"}
##### Click for answer
**ANSWER – with a subquery**
```{r}
#| ref.label: "q3700-ansSubquery"
```

##### Click for answer
**ANSWER – with a left join**
```{r}
#| ref.label: "q3700-ansLeftJoin"
```
:::



#### Question 38

List the name of each publisher and the total number of books that each publisher has published. Sort the results so that the publishers who published the most books appear at the top. If two or more publishers published the same number of books then they should be listed in alphabetical order. 

a.	The answer should only include publishers who have published some books.

    Using the data shown above, the output should be:

```{r q3800a}
#| echo: false

sqldf("
		select pub_name, count(*)
		from titles join publishers on publishers.pub_id = titles.pub_id
		group by pub_name
		order by count(*) desc, pub_name;
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3800a"
```
:::



b.	Same as previous question but 
    this time make sure to also include publishers who have published zero books

    Using the data shown above, the output should be:

```{r q3800b-ansLeftJoin}
#| echo: false

sqldf("
		select pub_name, count(titles.title_id)
		from publishers left join titles on publishers.pub_id = titles.pub_id
		group by pub_name
		order by count(*) desc, pub_name;
")
```

```{r q3800b-ansUnion}
#| include: false

sqldf("
	select pub_name , 0  as  NumTitles
	from publishers left join titles on publishers.pub_id = titles.pub_id
	where title_id is NULL 

UNION

	select pub_name, count(*) as NumTitles
	from titles join publishers on publishers.pub_id = titles.pub_id
	group by pub_name;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
**ANSWER - with a left join**
```{r}
#| ref.label: "q3800b-ansLeftJoin"
```

**ANSWER – with a UNION**  
```{r}
#| ref.label: "q3800b-ansUnion"
```


:::

## Additional questions 


#### Question 39

Show the names of the authors and the publishers who published their books.
Only show those authors/publishers where the author lives in the same state 
as the publisher who published the book.
Do not show any author/pbulisher names twice.

Using the data shown above, the output should be:

```{r q3900}
#| echo: false

sqldf("
select distinct au_fname, au_lname, pub_name, authors.state, publishers.state
from authors join title_authors on authors.au_id = title_authors.au_id
             join titles on title_authors.title_id = titles.title_id
             join publishers on titles.pub_id = publishers.pub_id
where authors.state = publishers.state
      ")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q3900"
```
:::


#### Question 40

The exchange rate for nis/usd is 3.3.  
Write a query that shows the titles and prices for biographies that cost between
10 and 20 dollars. Show two columns for the prices. One column for USD
and one column for NIS. Name the columns "price in USD" and "price in NIS".
Sort the results so that the most expensive books are displayed first.

Using the data shown above, the output should be:

```{r q4000}
#| echo: false

sqldf("
select title_name, price * 3.3 as 'price in NIS', price as 'price in USD', type
from titles
where type = 'biography' and
      price >= 10 and price <= 20
order by price desc
      ")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4000"
```
:::


#### Question 41

Show those titles for which the price of the book is greater than the 
average price of all books and the number of pages of the book is less
than the average number of pages for all books. 
    
Using the data shown above, the output should be:



```{r q4100}
#| echo: false

sqldf("
select title_name, price, pages
from titles
where price > (select avg(price) from titles) and
      pages < (select avg(pages) from titles)
      ")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4100"
```

The answer above uses the following two "non-correlated" subqueries.
It might help your understanding of the answer above to see the output
of the subqueries when they are run by themselves.

```{r}
# The average price of all books
sqldf("select avg(price) from titles")

# The average number of pages of all books
sqldf("select avg(pages) from titles")
```
:::


#### Question 42

Show the authors who have not written any books

Using the data shown above, the output should be:

```{r q4200}
#| echo: false

sqldf("
select au_fname, au_lname
from authors left join title_authors on authors.au_id = title_authors.au_id
where title_authors.au_id is null
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4200"
```
:::


#### Question 43

In each row show an author's name and the number of books that author wrote.  
Only show those authors who wrote at least two books.  
Sort the results alphabetically (last name, first name).

Using the data shown above, the output should be:

```{r q4300}
#| echo: false

sqldf("
select au_fname, au_lname, count(*)
from authors join title_authors on authors.au_id = title_authors.au_id
group by au_fname, au_lname
having count(*) >= 2
      ")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4300"
```
:::



#### Question 44

Same as previous question. However, this time, only show those authors
who wrote biographies, the count of the number of biographies they wrote
and only show those authors who wrote at least 2 biographies.
    
Using the data shown above, the output should be:


```{r q4400}
#| echo: false

sqldf("
select au_fname, au_lname, count(*)
from authors join title_authors on authors.au_id = title_authors.au_id
             join titles on title_authors.title_id = titles.title_id
where type = 'biography'
group by au_fname, au_lname
having count(*) >= 2
")
```


::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4400"
```
:::


#### Question 45 - a

Write a query to show the books in the titles table
for which both the author and the publisher
have a higher than average price for books they have worked on.
Sort the rows alphabetically by publisher name. 
Sort the rows that have the same publisher name by the author's name. 

Using the data shown above, the output should be:

```{r q4500b}
#| echo: false

sqldf("
select pub_name, au_fname, au_lname, title_name
from authors join title_authors on authors.au_id = title_authors.au_id
             join titles on title_authors.title_id = titles.title_id
             join publishers on titles.pub_id = publishers.pub_id
where authors.au_id in 
         (
           select authors.au_id 
           from authors join title_authors on authors.au_id = title_authors.au_id
                        join titles on title_authors.title_id = titles.title_id
           group by authors.au_id 
           having avg(price) > (select avg(price) from titles)
         )
      and publishers.pub_id in
         (
           select publishers.pub_id 
           from titles join publishers on titles.pub_id = publishers.pub_id
           group by publishers.pub_id
           having avg(price) > (select avg(price) from titles)
         )
order by pub_name, au_lname, au_fname
")
```

::: {.callout-note collapse="true"}
##### Click for answer - using subqueries in WHERE
```{r}
#| ref.label: "q4500b"
```
:::

::: {.callout-note collapse="true"}
##### Click for answer - using subqueries in FROM
```{r}
sqldf("
select pub_name, au_fname, au_lname, title_name
from    (
          select authors.*
          from authors join title_authors on authors.au_id = title_authors.au_id
                       join titles on title_authors.title_id = titles.title_id
          group by authors.au_id 
          having avg(price) > (select avg(price) from titles)
        ) as highEndAuthors 

      join title_authors on highEndAuthors.au_id = title_authors.au_id

      join titles on title_authors.title_id = titles.title_id

      join 
        (
          select publishers.*
          from titles join publishers on titles.pub_id = publishers.pub_id
          group by publishers.pub_id
          having avg(price) > (select avg(price) from titles)
        )
      as highEndPublishers on titles.pub_id = highEndPublishers.pub_id

order by pub_name, au_lname, au_fname
")
```
:::

::: {.callout-note collapse="true"}
##### Click for answer - using Common Table Expressions (CTE)
You can modify either of the previous queries to use CTE instead of 
subqueries. The following modifies the previous query.
```{r}
sqldf("
with 
  highEndAuthors as 
  (
    select authors.*
    from authors join title_authors on authors.au_id = title_authors.au_id
                 join titles on title_authors.title_id = titles.title_id
    group by authors.au_id 
    having avg(price) > (select avg(price) from titles)
  ),

  highEndPublishers as 
  (
    select publishers.*
    from titles join publishers on titles.pub_id = publishers.pub_id
    group by publishers.pub_id
    having avg(price) > (select avg(price) from titles)
  )

select pub_name, au_fname, au_lname, title_name
from highEndAuthors join title_authors on highEndAuthors.au_id = title_authors.au_id
             join titles on title_authors.title_id = titles.title_id
             join highEndPublishers on titles.pub_id = highEndPublishers.pub_id
order by pub_name, au_lname, au_fname
")
```
:::


#### Question 45 - b

A literary agent is trying to connect authors with publishers who 
have not worked together before. Write a SQL query to help the agent 
identify these potential matches. Each row of your output should show the 
name of a publisher and the name of an author who have NOT worked together yet.

Sort the rows alphabetically by publisher name. For rows that have the same publisher name, sort them by the author's name. 

::: {.callout-note collapse="true"}
### Click for answer - Method 1: Using EXCEPT
```{r}
sqldf("
-- All existing and non-existing publisher/author relationships
SELECT publishers.pub_name, authors.au_fname, authors.au_lname 
FROM authors CROSS JOIN publishers

EXCEPT

-- Only the existing publisher/author relationships
SELECT publishers.pub_name, authors.au_fname, authors.au_lname 
FROM authors JOIN title_authors on authors.au_id = title_authors.au_id
             JOIN titles on title_authors.title_id = titles.title_id
             JOIN publishers on titles.pub_id = publishers.pub_id
 
ORDER BY pub_name, au_lname, au_fname
")
```
:::


::: {.callout-note collapse="true"}
### Click for answer - Method 2: Using LEFT JOIN 
```{r}
sqldf("
SELECT publishers.pub_id, pub_name, authors.au_id, au_fname, au_lname
FROM authors CROSS JOIN publishers
             LEFT JOIN (
                SELECT DISTINCT title_authors.au_id, titles.pub_id
                FROM title_authors JOIN titles 
                                   ON title_authors.title_id = titles.title_id
             ) AS author_publisher 
               ON authors.au_id = author_publisher.au_id AND 
                  publishers.pub_id = author_publisher.pub_id
WHERE author_publisher.au_id IS NULL
ORDER BY pub_name, au_lname, au_fname;
")
```
:::

::: {.callout-note collapse="true"}
### Click for answer - Method 3: Using NOT EXISTS
```{r}
sqldf("
SELECT publishers.pub_id, pub_name, authors.au_id, au_fname, au_lname
FROM authors CROSS JOIN publishers 
WHERE NOT EXISTS (
    -- NOTE 1 - This is a correlated subquery.
    --
    -- NOTE 2 - (unrelated to Note 1) With an EXISTS or NOT EXISTS subquery,
    -- it doesn't make a difference what data is returned by the subquery. 
    -- As long as ANYTHING is returned the query is considered to 'EXIST'
    -- Threfore it's more efficient to return as little info as possilble.
    -- SELECT 1 just returns the number 1 for each row that matches as 
    -- opposed to returning actual data from the tables. The query would
    -- work in the exact same way if we said SELECT * (or anything else) 
    -- it's just for efficiency that we say SELECT 1.
    SELECT 1 
    FROM titles JOIN title_authors ON titles.title_id = title_authors.title_id
    WHERE title_authors.au_id = authors.au_id
    AND titles.pub_id = publishers.pub_id
)
ORDER BY pub_name, au_lname, au_fname;
")
```
:::


::: {.callout-note collapse="true"}
### Click for answer - Method 4: Using NOT IN
```{r}
sqldf("
SELECT publishers.pub_id, pub_name, authors.au_id, au_fname, au_lname
FROM authors CROSS JOIN publishers
WHERE (authors.au_id, publishers.pub_id) NOT IN (
    SELECT title_authors.au_id, titles.pub_id
    FROM title_authors
    JOIN titles ON title_authors.title_id = titles.title_id
)
ORDER BY pub_name, au_lname, au_fname;
")
```
:::

::: {.callout-note collapse="true"}
### Click for answer - Method 5: Using Common Table Expressions (CTE)
Any of the previous queries could be reorganized by using 
Common Table Expressions (CTE). For example:
```{r}
sqldf("
WITH 

all_pairs AS (
    SELECT authors.au_id, au_fname, au_lname, publishers.pub_id, pub_name
    FROM authors CROSS JOIN publishers
),

existing_pairs AS (
    SELECT DISTINCT title_authors.au_id, titles.pub_id
    FROM title_authors JOIN titles ON title_authors.title_id = titles.title_id
)

SELECT all_pairs.pub_id,   all_pairs.pub_name, all_pairs.au_id, 
       all_pairs.au_fname, all_pairs.au_lname
FROM all_pairs
WHERE NOT EXISTS (
    SELECT 1 FROM existing_pairs
    WHERE existing_pairs.au_id = all_pairs.au_id 
    AND existing_pairs.pub_id = all_pairs.pub_id
)
ORDER BY pub_name, au_lname, au_fname;
")
```
:::



#### Question 45 - c

(continued from the previous question) The literary agent became more 
selective. He now wants to focus on introducing only those authors 
who command a higher than average price for their books with 
publishers who command a higher than average price for their books. 

Write a SQL query to help the agent identify these potential matches. Each row of your output should show the name of a publisher and the name of an author who have NOT worked together yet. The publishers should be those whose average book price is above the average price of all books. Similarly, the authors should be those whose average book price is above the average price of all books. 

Sort the rows alphabetically by publisher name. For rows that have the same publisher name, sort them by the author's name. 

Using the data shown above, the output should be:

```{r q4500c-ansExceptSubqueries}
#| echo: false

sqldf("
-- These are the potential matchups for highEnd authors/publishers
select pub_name, au_fname, au_lname
from (
        select authors.au_id, au_fname, au_lname
        from authors join title_authors on authors.au_id = title_authors.au_id
                     join titles on title_authors.title_id = titles.title_id
        group by authors.au_id, au_fname, au_lname
        having avg(price) > 
                 (select avg(price) from titles)
     ) as highEndAuthors
     
     cross join

     (
        select publishers.pub_id, pub_name
        from publishers join titles on publishers.pub_id = titles.pub_id
        group by publishers.pub_id, pub_name
        having avg(price) > 
                  (select avg(price) from titles)
     ) as highEndPublishers

EXCEPT

-- These are the existing publisher/author relationships
select pub_name , au_fname, au_lname
from authors join title_authors on authors.au_id = title_authors. au_id
             join titles on title_authors.title_id = titles.title_id
             join publishers on titles.pub_id = publishers.pub_id

order by pub_name, au_lname, au_fname
")
```

This is a relatively complex query. It might help to build up your answer
step by step. 

::: {.callout-note collapse="true"}
##### Click here for some hints
In order to check your work, it might be helpful to know the following:

* The average selling price of all books is:

  ```{r}
  sqldf("select avg(price) from titles")
  ```

* The average selling price of books by different publishers are:
  (The rows are sorted in decreasing order by average price.)

  ```{r}
  sqldf("
  select round(avg(price),2) as 'avg price of publishers books', pub_name
  from publishers join titles on publishers.pub_id = titles.pub_id
  group by publishers.pub_id, pub_name
  order by avg(price) desc, pub_name
  ")
  ```

* Therefore the publishers who are potential introduction candidates are 
  those whose avg book price is higher than average, ie.

  ```{r}
  sqldf("
  select pub_name
  from publishers join titles on publishers.pub_id = titles.pub_id
  group by publishers.pub_id, pub_name
  having avg(price) > (select avg(price) from titles)
  order by avg(price) desc, pub_name
  ")
  ```
  
* These are the average selling prices of the books for the 
  various authors 
  (The rows are sorted in decreasing order by average price.)

  ```{r}
  sqldf("
  select round(avg(price),2) as 'avg price of authors books', au_fname,   au_lname
  from authors join title_authors on authors.au_id = title_authors. au_id
               join titles on title_authors.title_id = titles.title_id
  group by authors.au_id, au_fname, au_lname
  order by avg(price) desc, au_lname, au_fname
  ")
  ```
  
* Therefore the authors who are potential introduction candidates are 
  those whose avg book price is higher than average, ie.

  ```{r}
  sqldf("
  select au_fname,   au_lname
  from authors join title_authors on authors.au_id = title_authors. au_id
               join titles on title_authors.title_id = titles.title_id
  group by authors.au_id, au_fname, au_lname
  having avg(price) > (select avg(price) from titles)
  order by avg(price) desc, au_lname, au_fname
  ")
  ```
:::



::: {.callout-note collapse="true"}
##### Click for answer - using EXCEPT with subqueries
**Answer using EXCEPT with subqueries**
```{r}
#| ref.label: "q4500c-ansExceptSubqueries"
```
:::

::: {.callout-note collapse="true"}
##### Click for answer - using EXCEPT with Common Table Expressions (CTE)
```{r}
#| echo: false

sqldf("
WITH

highEndPublishers AS     
     (
        select pub_name
        from publishers join titles on publishers.pub_id = titles.pub_id
        group by publishers.pub_id, pub_name
        having avg(price) > 
                  (select avg(price) from titles)
     ),

highEndAuthors AS
    (
        select au_fname, au_lname
        from authors join title_authors on authors.au_id = title_authors.au_id
                     join titles on title_authors.title_id = titles.title_id
        group by authors.au_id, au_fname, au_lname
        having avg(price) > 
                 (select avg(price) from titles)
     ), 

allExistingRelationships AS
     (
        select pub_name , au_fname, au_lname
        from authors join title_authors on authors.au_id = title_authors. au_id
                     join titles on title_authors.title_id = titles.title_id
                     join publishers on titles.pub_id = publishers.pub_id
     )

select * 
from highEndPublishers CROSS JOIN highEndAuthors

   EXCEPT

select * 
from allExistingRelationships

order by pub_name, au_lname, au_fname
")
```
:::

::: {.callout-note collapse="true"}
##### Click for answer - using NOT EXISTS with subqueries
```{r}
sqldf("
select pub_name, au_fname, au_lname
from (
        select authors.au_id, au_fname, au_lname
        from authors join title_authors on authors.au_id = title_authors.au_id
                     join titles on title_authors.title_id = titles.title_id
        group by authors.au_id, au_fname, au_lname
        having avg(price) > 
                 (select avg(price) from titles)
     ) as highEndAuthors
     
     cross join

     (
        select publishers.pub_id, pub_name
        from publishers join titles on publishers.pub_id = titles.pub_id
        group by publishers.pub_id, pub_name
        having avg(price) > 
                  (select avg(price) from titles)
     ) as highEndPublishers

where not exists
     (  -- correlated subquery
        select 1
        from authors join title_authors on authors.au_id = title_authors. au_id
                     join titles on title_authors.title_id = titles.title_id
                     join publishers on titles.pub_id = publishers.pub_id
        where publishers.pub_id = highEndPublishers.pub_id and
              authors.au_id = highEndAuthors.au_id
     )

order by pub_name, au_lname, au_fname
")
```
:::

::: {.callout-note collapse="true"}
##### Click for answer - using NOT EXISTS with Common Table Expressions (CTE)**
```{r}
sqldf("
with
  highEndAuthors as 
  (
        select authors.au_id, au_fname, au_lname
        from authors join title_authors on authors.au_id = title_authors.au_id
                     join titles on title_authors.title_id = titles.title_id
        group by authors.au_id, au_fname, au_lname
        having avg(price) > 
                 (select avg(price) from titles)
  ),
  
  highEndPublishers as
  (
        select publishers.pub_id, pub_name
        from publishers join titles on publishers.pub_id = titles.pub_id
        group by publishers.pub_id, pub_name
        having avg(price) > 
                  (select avg(price) from titles)
  ),

  existingRelationships as 
     (  -- correlated subquery
        select 1
        from authors join title_authors on authors.au_id = title_authors. au_id
                     join titles on title_authors.title_id = titles.title_id
                     join publishers on titles.pub_id = publishers.pub_id
        where publishers.pub_id = highEndPublishers.pub_id and
              authors.au_id = highEndAuthors.au_id
     )
  
select pub_name, au_fname, au_lname
from highEndAuthors cross join highEndPublishers
where not exists
     ( select 1 from existingRelationships )

order by pub_name, au_lname, au_fname
")
```
:::



#### Question 46

Show the names of the most prolific authors, i.e. the authors 
who have written the most books. Note that there could be
several different authors who are "tied" for the most number of books.  
Sort the names in alphabetical order (last name, first name)
Also show the au_id and the number of titles that the author wrote.

Using the data shown above, the output should be:

```{r q4600}
#| echo: false

sqldf("
select authors.au_id, au_fname, au_lname, count(*) as numTitles
from authors join title_authors on authors.au_id = title_authors.au_id
group by authors.au_id, au_fname, au_lname
having numTitles = 
          (select max(numTitles2) 
           from 
               (select authors.au_id, count(*) as numTitles2
                from authors join title_authors on authors.au_id = title_authors.au_id
                group by authors.au_id, au_fname, au_lname))
order by au_lname, au_fname
")
```

::: {.callout-note collapse="true"}
##### Click for answer
This is a rather complex answer.
This approach uses a subquery within a subquery.
There may be other approaches too.
There may be simpler answers too.
 
To explain we will show the subqueries and what they produce.
Then we will show the full query that includes the subquery.

The following query is NOT the answer. It is simply a query that 
shows the number of books that were written by each author. This
will be used as a subquery in the answer shown below.

```{r}
sqldf("
          select authors.au_id, count(*) as numTitles
          from authors join title_authors on authors.au_id = title_authors.au_id
          group by authors.au_id, au_fname, au_lname
")
```

We'd like to get the max number of titles that an author wrote. 
This amounts to getting the highest number from the numTitles column
in the previous query. We can do that by using the above query 
as a subquery in the from clause.

```{r}
sqldf("
          select max(numTitles2) 
          from 
               (select authors.au_id, count(*) as numTitles2
                from authors join title_authors on authors.au_id = title_authors.au_id
                group by authors.au_id, au_fname, au_lname)
      ")
```

Finally we can put this all together to answer our question. 
The following is the FULL ANSWER to the original question.
It uses the above query as a subquery in the having clause (see 
the code below). Note that in the following code there is a
subquery inside of a subquery.

**FINAL ANSWER:**

```{r}
#| ref.label: "q4600"
```
:::


#### Question 47

Show all topics and the authors who wrote books on those topics. 
Sort the ouput in alphabetical order by topic and within each 
topic in alphabetical order by the author. The first name and
last name of each author should be combined into a single column
called 'author'.

Using the data shown above, the output should be:


```{r q4700}
#| echo: false

sqldf("
	select type, au_fname || ' ' || au_lname as author
		from titles join title_authors on titles.title_id = title_authors.title_id
                join authors on title_authors.au_id = authors.au_id
		group by type, authors.au_id, au_fname, au_lname
		order by type, au_lname, au_fname;
")
```

::: {.callout-note collapse="true"}
##### Click for answer
```{r}
#| output: false
#| ref.label: "q4700"
```
:::

#### Question 48

Answer all parts of this question

  (a) Show all authors who wrote at least one biography or a history book 
      for Abatis Publishers. Do NOT show an author's name more than once
      even if they wrote several books.
      
      Using the data shown above, the output should be:
       
      ```{r q4800a}
      #| echo: false
      
      sqldf("
      	select distinct au_fname, au_lname
      	from authors join title_authors on authors.au_id = title_authors.au_id
      	             join titles on title_authors.title_id = titles.title_id
      	             join publishers on titles.pub_id = publishers.pub_id
      	where publishers.pub_name = 'Abatis Publishers' and
      	      (titles.type = 'biography' or titles.type = 'history')
      	order by au_lname, au_fname
      ")
      ```

      ::: {.callout-note collapse="true"}
      ##### Click for answer
      ```{r}
      #| output: false
      #| ref.label: "q4800a"
      ```
      :::

      
      
  (b) Show all authors who wrote at least one psychology book 
      for Abatis Publishers. Do NOT show an author's name more than once
      even if they wrote several books.
      
      Using the data shown above, the output should be:
       
      ```{r q4800b}
      #| echo: false
      
      sqldf("
      	select distinct au_fname, au_lname
      	from authors join title_authors on authors.au_id = title_authors.au_id
      	             join titles on title_authors.title_id = titles.title_id
      	             join publishers on titles.pub_id = publishers.pub_id
      	where publishers.pub_name = 'Abatis Publishers' and
      	      titles.type = 'psychology'
      	order by au_lname, au_fname
      ")
      ```
      

      ::: {.callout-note collapse="true"}
      ##### Click for answer
      ```{r}
      #| output: false
      #| ref.label: "q4800b"
      ```
      :::
      
  (c) Abatis Publishers believes publishing a book on the history 
      of psychology during Sigmund Freud's era would be a worthwhile endeavor.
      They think it would be best to get two authors to collaborate on 
      the book - one author who has a psychology background and one author
      who has a history or biography background. 
      
      In order to brainstorm
      which authors might work together well, Abatis Publishers
      would like to see a list
      of each author who wrote a history or biography book with them matched
      up with each author who wrote a pschology book with them. The publisher
      will then look through the list and think about which combination of
      authors might make the most sense - then they'll try to contact
      the chosen authors and persuade them to take on the project.
      
      Write a query that returns two columns. 
      
      The first column should be named 'history/biography author' and
      contain names of authors who wrote a history or biography 
      book with Abatis (combine the authors first and last
      names into a single column).
      
      The second column should be named 'psychology author' and
      contain names of authors who wrote a psychology
      book with Abatis.
      
      The output should show every combination of a history/biogrphy 
      author who wrote for Abatis with a psychology author who wrote for 
      Abatis.
      
      Using the data shown above, the output should be:

      ```{r q4800c}
      #| echo: false
      
      sqldf("
        select hist_bio_authors.au_fname || ' ' || hist_bio_authors.au_lname 
                   as 'history/biography author', 
               psych_authors.au_fname || ' ' || psych_authors.au_lname
                   as 'psychology author' 
        from 
            ( -- this is the query from part (a)
          	  select distinct au_fname, au_lname
            	from authors join title_authors on authors.au_id = title_authors.au_id
            	             join titles on title_authors.title_id = titles.title_id
        	                 join publishers on titles.pub_id = publishers.pub_id
            	where publishers.pub_name = 'Abatis Publishers' and
            	      (titles.type = 'biography' or titles.type = 'history')
        	    order by au_lname, au_fname
        	  ) as hist_bio_authors

            cross join
            
            ( -- this is the query from part (b)
            	select distinct au_fname, au_lname
            	from authors join title_authors on authors.au_id = title_authors.au_id
        	                 join titles on title_authors.title_id = titles.title_id
      	                   join publishers on titles.pub_id = publishers.pub_id
            	where publishers.pub_name = 'Abatis Publishers' and
          	        titles.type = 'psychology'
          	  order by au_lname, au_fname
          	) as psych_authors
      ")
      ```
      

      ::: {.callout-note collapse="true"}
      ##### Click for answer
      ```{r}
      #| output: false
      #| ref.label: "q4800c"
      ```
      :::


