## <yrChapterNumber>29. </yrChapterNumber>  "databases" and "database management systems"

A **"database (DB)"** is a collection of data that can be accessed by a computer 
programs (see below) in an accurate and efficient way. 

A "Database Management System (DBMS)" is the software that is used to enable
the storage and retrieval of the data in a database. 

Datbases and DBMS software are usually used as 
part of a larger software system. Software that is coded in programming 
languages such as R, Python, Java, etc. have the ability to interact with 
a DBMS to store an retrieve data from a database.

## Common features of databases 

Most databases and DBMS software provides the following features:

- **Reliable and Accurate Data** – Databases have built-in rules to keep data
  correct and consistent. They prevent mistakes like duplicate entries or missing
  information by ensuring that all data follows set guidelines. 

- **Multi User Access** – Databases allow many people to access
  and update data at the same time without causing errors or losing information.
  They use special features to keep everything organized, even when multiple users
  make changes at once. 

- **Handles Tremendous Amounts of Data** – Databases are designed to store and
  manage huge amounts of data efficiently. They remain fast and responsive even as
  the amount of data grows.

- **Security** – Databases have security settings to control who can
  see or change the data. 
  
- **Reliability** - Databases have safeguards to ensure that changes are
  properly saved and that information isn’t lost, even if something goes wrong
  (e.g. a blackout, earthquake, etc.).

::: {style="font-style: italic"}
Note that Excel is not usually considered a "database". Excel is FANTASTIC 
as a tool
for quickly gaining insights into data. However, Excel does not have most of
the  features listed above that describe typical databases. 
:::

## Different categories of databases

### Relational Databases

```{r}
# Different categories of databases exist. Databases in use
# today in business can be broken down into two different categories:
#
# 1. Relational Databases
#    
#    o These types of databases store information in "tables" that have rows
#      and columns of information - very similar to the way the data is
#      arranged in an R dataframe.
# 
#      - Each column of a relational database table
#        (a) has a name
#        (b) has a datatype (e.g. numeric, logical, character, etc)
#     
#      - Relational database tables use the term NULL in the same way that 
#        R uses the term NA - we'll see examples of this later.
#
#    o There are MANY different relational database products in use today.
#      Some very popular ones are:
#
#      - Microsoft SQL Server
#      - Oracle Relational Database Management System
#      - MySql
#      - Postgres
#      - MariaDb
#      - many, many others
#
#    o All Relational database software uses the SQL language to manipulate the 
#      contents of the database. (there may be a rare exception I don't know about)
#
#      Each relational database software product has its own "flavor"
#      of the SQL language. You can think of this as different "dialects"
#      of the same language. For example the difference between English 
#      as it's used in the USA vs as it is used in England.
#
#      There exists a SQL standard that is recognized by all relational database
#      software programs
#      (see https://blog.ansi.org/2018/10/sql-standard-iso-iec-9075-2016-ansi-x3-135/#gref).
#      However, most relational database products add additional 
#      capabilities and commands to its version of SQL to differentiate it
#      from other relational database products in the market.
#
#      In this class we will be focusing primarily on the SQL standard
#      features that are included in all relational database products
#      and not on the extensions that are provided by the various products.
```

### Non-Relational Databases (AKA NoSQL databases)

NoSQL (or non-relational) databases organize information in formats other than 
rows and columns. 

SOME NoSql databases actually CAN be manipulated with the SQL language.
However, the term NoSql has come to include any database that stores
information in a form other than in strict rows and columns.

Some examples are shown below.

### Document databases - e.g. MongoDB


```{r}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#         MongoDb is an example of Database Management software that stores information
#         in "JSON" notation. Other similar products include CouchDB, Firebase
#         and Firestore. We will explore more about JSON later in the semester.
#         However as an example, the above information could be represented in a JSON
#         file as shown below:
#
#           [
#             {
#               "name" : "annie",
#               "friends" : [ "sam" ]
#             },
#             {
#               "name" : "jack",
#               "friends" : [ "annie" , "mac" , "doug" , "harry" ]
#             },
#             {
#               "name" : "howard",
#               "friends" : [ "jack" ]
#             },
#             {
#               "name" : "sam",
#               "friends" : [ ]
#             },
#             {
#               "name" : "mac",
#               "friends" : [ ]
#             },
#             {
#               "name" : "harry",
#               "friends" : [ ]
#             },
#             {
#               "name" : "doug",
#               "friends" : [ ]
#             }
#           ]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

### Graph databases - e.g. Neo4J

2. **Graph Databases**  *(mentioned above)*

Neo4J is an example of a "graph database". These types of databases
organize their information in a "graph" structure.
A graph looks like a "web" of information. It is comprised of "nodes"
that contain data which are connected
via "edges" that represent relationships between the nodes. 
 
For example:

```{mermaid}
graph TD
    %% Position nodes to match example layout
    Sam([Sam])
    Annie([Annie])
    Mac([Mac])
    Jack([Jack])
    Doug([Doug])
    Harry([Harry])
    
    %% Create bidirectional connections with straight lines
    Annie <-->|friend| Sam
    Jack <-->|friend| Annie
    Jack <-->|friend| Mac
    Jack <-->|friend| Doug
    Jack <-->|friend| Harry
    
    %% Black and white styling
    classDef person fill:white,stroke:black,stroke-width:1px;
    class Sam,Annie,Mac,Jack,Doug,Harry person;
    
    %% Force specific layout
    Sam ~~~ Annie
    Mac ~~~ Jack ~~~ Doug
    Jack ~~~ Harry
    
    %% Make invisible linkage lines transparent
    linkStyle 5,6,7 stroke:none;
```

This example shows a set of people and who is friends with whom.
There is a different icon for each person. "Friend arrows" indicate 
who is friends with whom.

For many types of information a diagram as shown above is much more
intuitive and understandable than a table of information. This is
just one reason why graph databases are popular.

However, this same information could be converted to the following
table and stored in a relational database.

```
            name      is_friends_with
            ----      ---------------
            annie     sam
            jack      annie
            jack      mac
            jack      doug
            jack      harry
```

The following is version of the graph also includes "company" nodes and 
relationships indicating where people work.
In general, graphs can be
quite complex and be used to store all sorts of information.

```{mermaid}
graph LR
    %% Define nodes with type labels
    Sam([Person: Sam])
    Annie([Person: Annie])
    Mac([Person: Mac])
    Jack([Person: Jack])
    Doug([Person: Doug])
    Harry([Person: Harry])
    Acme([Company: Acme Inc.])
    MikroTek([Company: MikroTek])
    
    %% Friend relationships (bidirectional)
    Annie <-->|friend| Sam
    Jack <-->|friend| Annie
    Jack <-->|friend| Mac
    Jack <-->|friend| Doug
    Jack <-->|friend| Harry
    
    %% Work relationships
    Sam -->|works at| Acme
    Annie -->|works at| Acme
    Mac -->|works at| MikroTek
    Jack -->|works at| MikroTek
    Doug -->|works at| MikroTek
    
    %% Styling for nodes - white background with black borders and text
    classDef person fill:white,stroke:black,stroke-width:1px,color:brown;
    classDef company fill:white,stroke:black,stroke-width:2px,stroke-dasharray:5 2,color:green;
    
    %% Apply styles
    class Sam,Annie,Mac,Jack,Doug,Harry person;
    class Acme,MikroTek company;
```


### Other types of NoSQL databases

<yrAiGen url="chatgpt.com" topic="?" />

The are other types of NoSQL databases. The following are also
popular. We will not go into these in more detail now.

The main thing that NoSQL databases have in common is that the data is NOT
stored in a rectangular form (i.e. rows and columns). 

1. **Key-Value Stores**  
   - Store data as a collection of key-value pairs.  
   - Fast reads and writes, ideal for caching and session management.  
   - **Examples:** Redis, Amazon DynamoDB, Riak

2. **Column-Family Stores**  
   - Organize data into columns rather than rows, optimized for analytical queries.  
   - Designed for high scalability and distributed storage.  
   - **Examples:** Apache Cassandra, HBase, ScyllaDB




