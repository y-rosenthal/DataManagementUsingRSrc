<!-- This was created with claude.ai
URL: https://claude.ai/chat/dc928f19-5a27-48fa-8690-efac36c52d48
TOPIC: Qarto about jsonlite and nested dataframes


TODO - 

* check over this file

* Create new .qmd file with json questions

  - claude:
    URL: https://claude.ai/chat/5b6736d2-6645-4b82-ad54-b00d73dab00b 
    TOPIC: Mastering JSON Data Extraction with R's jsonlite

* .qmd file - working with files:

  - review this whole file - some issues are listed below

  - mistake with exmaple of dir() shows contents of wrong folder
    fix this.
    
  - writeup relative paths
  - pattern argument to dir function
  - fs package
    * dir_ls
    * 
  
* 3d arrays - point to content in rnotes book  

* data cleaning assignment 

  - claude
    URL: https://claude.ai/chat/917af685-f786-4ea9-a220-69f95aa43aac
    TOPIC: Data Cleaning Assignment Using Regex Functions in R

TO DO AFTER TEST

* add content about readLines and writeLines 
  see claude
  URL: https://claude.ai/chat/7699b9f4-b790-4414-aef9-7e5356ff9c37
  TOPIC: reading and writing text files in r
  
  - explain what a text file is
  - explain about encoding
-->

# <yrChapterNumber></yrChapterNumber> Working with JSON in R using jsonlite

Using R to read/write JSON files and process their contents comes down
to knowing how to do the following

- read/write JSON text to/from R vectors using the baseR functions 
  readLines() and writeLines()

- convert between JSON text and R objects (lists, dataframes, matrices, arrays, etc)
  using the fromJSON() and toJSON() functions from the jsonlite package

- knowing how to navigate the R objects that were created from the JSON
  to retrieve the data you want. This is just standard R knowledge
  about how to navigate R objects.

These topics are covered below.

To use the toJSON or fromJSON functions we will need to use the jsonlite 
package.

```{r}
if(!require(jsonlite)){install.packages("jsonlite");require(jsonelite);}
```

## The jsonlite package

The `jsonlite` package in R provides numerous functions for working with JSON.
We will discuss the following functions below:

- `toJSON()`: Convert R objects into a JSON format character vector
   (You can then write this vector to a file using writeLines() - see above)
   
- `fromJSON()`: Convert JSON data into R objects

- `prettify()` : Format the JSON text on different lines and indent the text in a readable way

- `minify()` : Convert JSON text to a single line and remove all extra spaces and tabs


## toJSON() - Convert R objects to JSON text

Any R object (e.g. vector, list, dataframe, etc) can be converted to 
JSON text and written to a JSON file. The steps are:

1. Convert the R object to JSON text :  

   `jsonText = jsonlite::toJSON( SOME_R_OBJECT )` 
   
2. Write the JSON text to a file :

   `writeLines(jsonText, filename)`
   
   
**Example**:

```{r}
# create a dataframe
df = data.frame(
  student = c("joe", "sue", "anne"),
  honors = c(FALSE, FALSE, TRUE),
  test1 = c(NA,80,90),
  test2 = c(75,85,95)
)

df

# convert the dataframe to JSON text
json = toJSON(df, pretty=TRUE)

json

# Create a new directory (i.e. folder) to contain the json files.
# (We create a folder to contain the file. The folder isn't necessary but
# in general, it's a good idea to organize your files into folders that make sense.)
dir.create("jsonFiles", 
           showWarnings=FALSE) # don't warn us if the folder already exists

# Create a file that contains the JSON data
writeLines(json, "jsonFiles/sampleJsonFile.json")

# Use dir() to see that the file has been created.
dir("jsonFiles")

# We can see the text of the file by reading the lines of 
# the file into a character vector with the BaseR readLines() function.
lines = readLines("jsonFiles/sampleJsonFile.json")

# A character vector - each entry is one line from the file.
# This can be very hard to read.
lines

# It is much easier to read the data with cat
cat(lines, sep="\n")
```

<!--
- read/write JSON text to/from R vectors

  * readLines() from Base-R is used to read JSON text from a file into
    an R character vector
  
  * writeLines() from Base-R is used to write a character vector containing
    JSON text into a file

- convert between JSON text and R objects (lists, dataframes, matrices, arrays, etc)

  * fromJSON() from the jsonlite package is used to convert JSON text from 
    a character vector into R objects (e.g. lists, dataframes, etc) 
    
  * toJSON() (from jsonlite) is used to convert R objects into JSON text.

- knowing how to navigate the R objects that were created from the JSON
  to retrieve the data you want (This is basically standard R knowledge
  about how to navigate R objects.)
-->

<!--
## read/write JSON text to/from R vectors (readLines() / writeLines())

-->

<!--
## Writing JSON to a text file

JSON in its raw form is just plain text. 
JSON files are simply text files. We can create a JSON text file
by writing out the contents of an R character vector that contains
JSON text to a file by using the writeLines() baseR function.

**Example:**

Create an R variable that contains the JSON text. 
(The example uses a single character value that contains the entire
JSON. We could just as well have created a character vector that contains a new 
character value for each line of the JSON file.)

```
# Create a character value that contains JSON.
#
# We can write a single character value that spans multiple lines
# using a single set of surrounding 'single quotes'

jsonData = '
    {
      "name": "Math 101",
      "students": ["Alice", "Bob", "Charlie"]
    }'

# The data will contain \n's, but that's fine.
jsonData
  
# We can use cat to see the contents without the \n's
cat(jsonData)
```

Write the data to a file using the writeLines function.
(We create a folder to contain the file. The folder isn't necessary but
in general, it's a good idea to organize your files into folders that make sense.)

```
# Create a new directory (i.e. folder) to contain the json files.
dir.create("jsonFiles", 
           showWarnings=FALSE) # don't warn us if the folder already exists

# Create a file that contains the JSON data
writeLines(jsonData, "jsonFiles/sampleJsonFile.json")

# Use dir() to see that the file has been created.
dir("jsonFiles")
```

-->


### toJSON( ... pretty=TRUE ...)

Note that toJSON call above included the argument "pretty=TRUE". 
This formats the JSON with easy to read indentation.

By contrast, if you leave out "pretty=TRUE" (or if you specify pretty=FALSE)
the JSON is created in "minified" format - i.e. all in one line without
any extra "whitespace" (no extra spaces, tabs or newline characters), 
as shown below. The minified version is easy for computers 
to read and takes up less space.
The "pretty" version is appropriate when you want people to read
and understand the JSON.

There are also standalone functions prettify() and minify() that 
convert JSON text - see the next section.


### prettify()  , minify()

The jsonlite package also provides standalone functions for formatting JSON text.

- `jsonlite::prettify()` formats JSON text on different lines and indents the text in a readable    way.

- `jsonlite::minify()` removes all extra "whitespace" from JSON text. In other 
  words, it converts JSON text to a single line and removes all 
  extra spaces and tabs.

**Examples**

```{r}
# Create a compact JSON string
json_string <- '{"name":"Alice","age":25,"hobbies":["reading","hiking"]}'

# Make it pretty
prettify(json_string)

# Make it compact
minify(prettify(json_string))  # Converting pretty JSON back to compact form
```

## toJSON() - How R objects are converted into JSON 

The information below reflects the 
default approach that toJSON() uses in converting R data into JSON.
However, toJSON() takes numerous arguments that can be used to adjust exactly
what form the resulting JSON takes. For more info see 
the R help `?toJSON`

- R vectors are converted into JSON arrays

  ```{r}
  nums = c(10,20,30)
  toJSON(nums, pretty=TRUE)
  ```
  
- R dataframes are converted into a JSON array of JSON classes.
  Each class represents a row of the dataframe and contains a "name":value 
  pair for each value in the row. 
  If a row contains NA in a column, the resulting JSON class will be 
  missing the "name":value pair that corresponds to that column
  (for an example of NA, see Joe's grade for test1 in the example below)

  **Example:**
  
  ```{r}
  df = data.frame(
    student = c("joe", "sue", "anne"),
    honors = c(FALSE, FALSE, TRUE),
    test1 = c(NA,80,90),
    test2 = c(75,85,95)
  )

  toJSON(df, pretty=TRUE)
  ```

- R matrices are converted into a JSON array of JSON arrays

  **Example**
  
  ```{r}
  mat = matrix(seq(10,120,by=10), nrow=3, ncol=4)
  mat
  toJSON(mat, pretty=TRUE)
  ```
  
<!-- YRTODO - FINISH THIS PART

- R "3 dimensional arrays" are converted into JSON arrays of
  JSON arrays of JSON arrays. 
  
  **Example**
  
  ```{r}
  my_array <- array(1:24, dim = c(2, 3, 4))
  my_array
  
  toJSON(my_array, pretty=TRUE)
  ```
-->

- R lists whose values have names are converted into JSON classes.

  **Example**
  
  ```{r}
  # named lists
  
  namedList = list( first="joe", middle=NA, last="jones", gpa=3.5, honors=FALSE )
  toJSON(namedList, pretty=TRUE)
  ```

<!--  
  R lists whose values do NOT have names are converted into JSON arrays.
  
  
  ```
  # unnamed lists
  
  unnamedList = list("abc", TRUE, 100, NA)
  
  unnamedList 
  
  toJSON(unnamedList, pretty=TRUE)

  ```
-->





## fromJSON() - Convert JSON text into R objects

Often we start with JSON text - either from a JSON file or JSON data
that is returned from a call to a Web API - and we want to convert 
the JSON into R objects (lists, dataframes, etc) so 
that we can work with the data in R.

We can use the fromJSON() function to convert JSON text into an R object.
fromJSON() can accept (a) a filename that contains JSON text 
(b) a Web API URL that returns JSON text or (c) a character vector
that contains JSON text. fromJSON() returns an R object (e.g. 
list, dataframe, matrix, etc) that can be manipulated with R code
to get at the exact data you want.

After converting the JSON text to an R object, it is helpful to use
the str() or View() functions to 
see the structure of the R object so that you can 
figure out how to access the specific data you want.


**Example**:

We use fromJSON() to read the file that we created above from the dataframe
and get an R object that contains the data.



```{r}
x = fromJSON("jsonFiles/sampleJsonFile.json")

x
```

In this case it's easy to understand that fromJSON() returns a dataframe
since we know that we had originally created this JSON from an R dataframe.
However, when reading complex JSON files, it can be helpfult to use the
str() or View() functions to view the structure of the data so that 
you can understand how to retrieve the specific data that you want.

<!--

## Reading JSON from a text file into a character vector

The readLines() function in baseR reads the contents of a text file into
an R character vector. Each line in the file becomes an entry in 
the character vector. (This works for JSON files or any other type of text file.)
To do so, call: 

```
       SOME_CHARACTER_VECTOR = readLines( SOME_FILENAME )
```

To demonstrate we use readLines() to read the data from the JSON file we 
created above into a new variable. 

```
# Read the json data from the file into an R character vector
jsonDataReadIn = readLines("jsonFiles/sampleJsonFile.json")

# The vector contains one character entry for each line of the file
jsonDataReadIn

# Use cat to display the JSON in a more readable way
cat(jsonDataReadIn, sep='\n')
```
-->

<!--
If an R character vector contains JSON text, the JSON can be written out to a
JSON file by calling `writeLines( SOME_VECTOR , SOME_FILENAME )`.

To read the exact text from a text file into an R character vector, 
simply call `vectorName = readLines( SOME_FILENAME )` That crates a 
character vector that contains a separate value for each line from 
the file. 
-->


<!--
## jsonlite::toJSON() - convert R Objects (e.g. vectors, dataframes, lists, etc) to JSON

The `toJSON()` function converts R objects (vectors, lists, data frames) into 
JSON text.

```
library(jsonlite)

# Create a nested list
people <- list(
  list(
    name = "Alice",
    age = 25,
    hobbies = c("reading", "hiking")
  ),
  list(
    name = "Joe",
    age = 31,
    hobbies = c("video games", "cooking")
  )
)

# Convert to JSON text
jsonData = toJSON(people, pretty=TRUE)
jsonData
```

The value that is returned from toJSON has a class of "json". 
However, "under the covers" it is simply a single character value
whose class attribute is "json".
You can write this data to a file 
by calling writeLines(jsonData) (as described above).

```
# The jsonData variable was created above
jsonData

# toJSON returns a value with a class of "json"
class(jsonData)

# If we "unclass" this data we can see it is simply a 
# character vector of length 1 that contains the 
# text of the JSON.
class(unclass(jsonData))
length(unclass(jsonData))

# You can write the jsonData to a file
writeLines(jsonData, "exampleJsonData.json")
```

-->

<!--

## fromJSON() - convert JSON to R Objects

Use the `fromJSON()` function to convert JSON to an R object. 
Different types of R objects (e.g. lists, vectors, data.frames, matrices)
can be created depending on how the JSON is structured (see details
in the sections below).

```
# Convert JSON to an R object.
# (Notice the 'single quotes' around the entire text. These are 
#  necessary since the JSON itself contains "double quotes".)
json_text <- '{"name": "Alice", "age": 25}'
rData = fromJSON(json_text)
rData

# see the structure of the R object
str(rData)
```

-->

### fromJSON() - The JSON can come from a character vector, a file, or an API

The `fromJSON()` function can accept JSON data from any of the 
following sources:

1. From a character vector that contains JSON text.
   The vector might consist only of a single character value that contains the full JSON text  
   (see the example above).
   The vector can also contain the JSON
   split up into multiple character values (e.g. one line of JSON
   per character value) The JSON
   is treated as the concatenation of all the character values.
   (see this example)

   ```{r}
   # JSON as a character string
   json_text <- c('{', 
                  '  "name": "Alice",', 
                  '  "age": 25', 
                  '}')

   rData = fromJSON(json_text)

   rData

   # see the structure of the R object
   str(rData)
   ```
3. From a JSON file

   ```{r}
   # Assuming you have a file named 'data.json'
   # fromJSON("data.json")  # Commented out as file doesn't exist
   ```

4. From a Web API URL

   ```{r}
   # Example with a public API
   # fromJSON("https://api.example.com/data")  # Commented out as URL doesn't exist
   ```

## fromJSON() - How the JSON is converted to an R object.

The general rule is as follows:

The fromJSON function has a few "simplifyXXX" arguments (see below). The
default is that all "simplifyXXX" arguments are set to TRUE. When that is
the case then the fromJSON function usually operates in a way that 
is the opposite to 
the toJSON function. If toJSON converts a particular type of R object
into a particular type of JSON, then fromJSON will convert that type of
JSON into the correponding type of R object. See the discussion of the 
toJSON function above for details. 

This is usually enough to understand what's going on. To get specific data
from the R object, it helps a lot to understand the structure of the 
object by using the str() or View() functions.

The following goes into more detail, but you really don't have to 
study this too deeply. In general, looking at the str() function and 
navigating through the data using your knowledge of R is usually enough.



**More details**

1. Usually JSON consists of a JSON class or a JSON array. 
   However, a single number, character value, true/false or null is also
   valid JSON. In the unusual case that the JSON consists of just one number, 
   character value or logical value then the corresponding R object is just a 
   single R numeric, logical or character value. For exmaple:

   ```{r}
   # Returns a single numeric value, not a list
   fromJSON('42')
   
   # Returns a single character value, not a list
   fromJSON('"apple"')

   # Returns a single TRUE value, not a list
   fromJSON('true')
   ```

   Similarly, if the JSON consists of a single `null` value then the  
   result is a single NULL value in R.

   ```{r}
   # Returns a single NULL value, not a list
   fromJSON('null')
   ```

2. If the JSON consists of `["a","JSON","array"]` or a 
   `{"JSON": "class"}`, then  the type of R object that is created depends
   on the values of the structure of the JSON and on the values of 
   the three "simplify" arguments to the fromJSON function (see the next 
   section)

### fromJSON( ... simplifyVector, simplifyDataFrame, simplifyMatrix ...)

The help for `fromJSON()` shows the arguments and their default values:

    ```
    fromJSON(
      txt,
      simplifyVector = TRUE,
      simplifyDataFrame = simplifyVector,
      simplifyMatrix = simplifyVector,
      flatten = FALSE,
      ...
    )
    ```

The arguments simplifyVector, simplifyDataFrame and simplifyMatrix control how 
the R object is created when the JSON consists of a JSON array or a JSON class. 

By default all values are TRUE. Notice that by default, the value for 
simplifyDataframe and simplifyMatrix are set to the same value as is supplied
for simplifyVector. Therefore to set all the values to FALSE, you can simply
pass as single FALSE value.

If all of these values are FALSE, the function will
returns an R list.  For example:

```{r}
# Returns a list
x = fromJSON('{"a": 1}', FALSE)
x
str(x)

# Returns a list
x = fromJSON('[1, 2, 3]', FALSE)
x
str(x)
```

When the simplifyVector, simplifyDataFrame or simplifyMatrix arguements are 
TRUE, then the R object being returned might be a vector, dataframe, matrix
or list (depending on the structure of the JSON).

#### fromJSON() - simplifyVector

```{r}
# JSON array example
json_array <- '["a", "b", "c"]'

# Default behavior (simplifyVector = TRUE) - you get an R vector
fromJSON(json_array)

# Without simplification (simplifyVector = FALSE) - you get an R LIST
fromJSON(json_array, simplifyVector = FALSE)
```

#### fromJSON() - simplifyDataFrame

When simplifyDataframe is set to TRUE JSON data that consists of an array of 
classes, is returned as an R dataframe. Each row of the dataframe comes
from the data of a single class in the JSON array.
This makes perfect sense when all of the 
classes contain the same names. Each name in the classes becomees a column
in the resulting dataframe. 

If some of the classes contain names that don't appear in other classes, then
there will be NAs in the resulting dataframe in those columns 
for rows that correspond to classes that didn't contain that name.

See the example:

```{r}
# A JSON array of JSON classes
jsonText <- '[
  {"first": "Bob",   "middle": "Michael", "last": "jones", "age": 30},
  {"first": "Alice", "last": "cohen",     "age": 25},
  {"first": "Jane",  "last": "springer",  "age": 25}
]'

# Default behavior (simplifyDataFrame = TRUE) returns an R dataframe
x = fromJSON(jsonText)
x
str(x)

# Without simplification (simplifyDataFrame = FALSE)
x = fromJSON(jsonText, simplifyDataFrame = FALSE)
x
str(x)

```


<!--

```
# A JSON array of JSON classes
jsonText <- '[
  {"name": "Alice", "age": 25},
  {"name": "Bob", "age": 30}
]'

# Default behavior (simplifyDataFrame = TRUE) returns an R dataframe
x = fromJSON(jsonText)
x
str(x)

# Without simplification (simplifyDataFrame = FALSE)
x = fromJSON(jsonText, simplifyDataFrame = FALSE)
x
str(x)
```
-->

#### fromJSON() - simplifyMatrix

```{r}
# JSON representing matrix-like data
json_matrix <- '[
                   [1, 2, 3], 
                   [4, 5, 6]
                ]'

# Default behavior (simplifyMatrix = TRUE)
fromJSON(json_matrix)

# Without simplification (simplifyMatrix = FALSE)
fromJSON(json_matrix, simplifyMatrix = FALSE)
```

### Working with Nested Data Frames

When JSON contains nested objects or arrays, `fromJSON()` can 
create nested data frames:

```{r}
# JSON with nested structure
nested_json <- '[
  {
    "name": "Alice",
    "pets": [
      {"type": "cat", "name": "Whiskers"},
      {"type": "dog", "name": "Rex"}
    ]
  },
  {
    "name": "Bob",
    "pets": [
      {"type": "fish", "name": "Bubbles"}
    ]
  }
]'

# Convert to nested data frame
nested_df <- fromJSON(nested_json)
nested_df

# When trying to retrieve the data it is VERY important to 
# understand the structure of the R data. 
# You can use the following tools to do so:
#
#    str() function in baseR
#    View()  function in baseR (View with a capital "V")
#    tidyverse::glimpse() function in tidyverse's dplyr package - similar to str()
#    the variable in the "Environment" window pane in RStudio

# See the structure of the data to understand how to extract specific data
str(nested_df)

# By analyzing the output from str() we can understand how to access 
# specific data that we might want.

# Get the pet owner's names
nested_df$name

# Get info for all pets
nested_df$pets

# Get all info for pets of person #1
nested_df$pets[[1]]

# Use str to see the structure of this
str(nested_df$pets[[1]])

# See all info for the 1st person's 2nd pet
nested_df$pets[[1]][2,]

# Get all info for pets of person #2
nested_df$pets[[2]]


# Get the types of pets for person #1
nested_df$pets[[1]]$type

```

In this example, the nested data frame has a column `pets` that contains another data frame. Each row in the `pets` column corresponds to the pets owned by the person in that row of the main data frame.

## 3 dimensional (3d) arrays

```{r}
#| warning: false

# The following JSON gets converted into a 3 dimensinal array in R
# which is basically an array of matrices

x=fromJSON('[
              [
                [1,2,3,4],
                [5,6,7,8]
              ],
              [
                [9,10,11,12],
                [13,14,15,16]
              ],
              [
                [17,18,19,20],
                [21,22,23,24]
              ]
            ]')

# 1st matrix
x[1,,]

# 2nd matrix
x[2,,]

# 3rd matrix
x[3,,]

# The first index specifies which matrix or matrices
# The 2nd index specifies which row or rows
# The 3rd index specifies which column or columns

# all values from 1st row of 3rd matrix
x[3,1,]

# all values from 2nd column of 1st matrix
x[1,,2]

# The 2nd matrix, 1st row, 3rd column
x[2,1,3]

# All 3 matrices, just the numbers in the first row and first column
x[,1,1]

# The 2nd rows from each matrix
x[,2,]
```
