# <yrChapterNumber></yrChapterNumber> WHAT IS A COMMAND LINE INTERFACE (CLI)?

Modern computers allow you
to click and drag icons, use menus, open many programs at once, etc.
It's hard to imagine a computer that doesn't have these features.

However, a long time ago (pre 1990'ish) none of this was possible.
In order to use a computer you had to memorize many different 
commands. You would type these commands into the computer in order
to run programs and interact with the computer.

Today the modern computer "interface" (the one that has icons,
menus, etc) is known as a "Graphical User Interface" or GUI (pronounced
"gooey"). The old style interface that required that you type
commands to do ANYTHING is still able to be used. This type of 
interface is known as a "Command Line Interface" or CLI. 

## WHY SHOULD I CARE ABOUT A CLI ?

For day to day casual computer work, it may be hard to understand why
anyone would use a CLI instead of a modern GUI interface. Using a 
CLI requires memorizing many different seemingly arcane commands instead
of just "pointing and clicking" on what you want. Why would anyone 
want to do that?


### Reason 1 to use a CLI - it allows you to do powerful things quickly

Many of the CLI commands can be quite powerful and can cut down
the amount of time it takes to do things by A LOT. For example, suppose
a folder contains 1000 files. For example
"expenseReport-Jan2020.xlsx", "meetingMinutes-Jan012020.docx", etc. (1000 such files)
You are told by your boss that you must add your name as part of the filename
for each of these 1000 files. If you are using a GUI, that could take
hours. However, for someone who is proficient with a using a CLI,
it could take seconds to type in the correct commands to do that for all
1000 files.


### Reason 2 to use a CLI -  you can create "scripts" to automate many things

Suppose your boss told you that everyone in the company needs to
make the same changes to their filenames. However, not everyone 
knows how to use a CLI. You could theoretically create a small 
"script" (ie. a program) using the CLI commands that would allow anyone
to "run the script" to make the changes. 

Tasks that need to be done repeatedly are often best accomplished by creating
a CLI script. The script can then be run anytime the task needs to be done.



## DIFFERENT CLIs FOR DIFFERENT COMPUTER SYSTEMS

Just as the Graphical User Interface (GUI) for the Mac is different from the 
GUI for Windows, the standard CLI available for the Mac is diffrent from the 
CLI(s) that are available on Windows. This means that the commands that you
need to type on Mac are different from the commands that you would type on 
Windows.


### Mac

The Mac CLI is used by running the Terminal program. The terminal program 
actually allows 


### Windows

Windows as two different CLIs available - 
- The "Command Prompt" (cmd) :
  For many years, this was the only CLI that was available on Windows.

- "Powershell" :
  This is a newer CLI that Microsoft first introduced in 2006. It is more
  complicated to use than the "Command Prompt" but in many ways is more
  powerful. Today both CLIs are available on Windows machines

- You can also download a version of the "Bash Shell" CLI program
  (see below ...)



## What is the "Bash Shell" program?

The Linux operating system is very popular today for running "server" computers
that are used to support many of the "backoffice" tasks in companies today.
Linux is a derivative of the Unix operating system. These operating systems
had many different CLIs available. A very popular one is the "Bash Shell".
By default, the Mac Terminal program runs a version of the Bash Shell. 

Note that the "Bash Shell" has become somewhat of a standard.
By default the Mac "Terminal" program is actually running a version of the 
"Bash Shell". While Windows doesn't natively come with the Bash Shell, you
can download many different versions of a "Bash" CLI program that can 
be used on Windows. Some of these are:

- cygwin
- git bash
- mingw64 
- etc.

RStudio contains a version of mingw64 built in. 
You can access it from the "Terminal" tab that is next to the "Console" tab.

## Using "Bash" commands

We will be using the "terminal" tab on Posit.cloud to demonstrate
the "Bash Shell" CLI - more about this below.

You can download [these files]() to work along with this material.






# WHAT IS IN THIS FOLDER?

Click on [this link]() to download a "zip file" that contains files
that we will be working with to demonstrate many of the commands available
with the Bash CLI. 

A "zip file" is a single file that contains a condensed version of one or more 
files or folders.
To "extract" all of the files that are in this zip file, place the 
zip file in a 
a folder contains example files.
The purpose of these files and folders is to demonstrate how to navigate
through the folders and files by using a command line interface (CLI) such as

- The Mac "Terminal" program
- The Windows "Command Prompt" (cmd) program
- The Linux "Bash" program (also known as the "Bash Shell")

Keep reading for more info...







### Vocabulary related to folders (also known as "directories")

- A "directory" is a "folder"
  The word "directory" is a synonym for the word "folder". 
  They two words mean the EXACT SAME THING. 

- The "parent" of folder/direcotry, x, is the folder/directory that contains x.


### Important Bash commands that everyone should know

The following gives a brief description of how many commands work.
In the descriptions below, any part of the command that appears
in [square brackets] is optional.


- pwd                  - "Print the Working Directory" (ie display the "path" for the current working directory (CWD)

- cd SOME_DIRECTORY    - set the "working directory" to the specified directory
- cd                   - set the "working directory" to your "home directory"
- cd ..                - set the "working directory" to the "parent" of the current working directory
- cd ../..             - set the "working directory" to the parent of the parent of the current working directory
- cd ../../..  (etc.)  - set the "working directory" to 3 levels up in the directory hierarchy)

- mv SOME_FILE  SOME_DIRECTORY           - move SOME_FILE to SOME_DIRECTORY
- mv SOME_DIRECOTRY  ANOTHER_DIRECTORY   - move SOME_FILE to ANOTHER_DIRECTORY

- ls [SOME_DIRECTORY]               - list the files in the current directory or the specified [DIRECTORY]
- ls -l  [SOME_DIRECTORY]     - show a "long" listing (i.e. more info about each file/folder)
- ls -r  [SOME_DIRECTORY]     - reverse the order that the files are listed
- ls -lt [SOME_DIRECOTRY]     - show the contents in time order (with a long listing format)
- ls -l -t [SOME_DIRECOTRY]   - SAME THING - show the contents in time order (with a long listing format)
- ls -a  [SOME_DIRECTORY]    - show all files (including files that start with a period ( . )
- ls -R  [SOME_DIRECTORY] - show the files that are in all folders below the CWD (or the specified directory)
- ls SOME_FILE                - list the name of the 

- cat SOME_FILES              - display the contents of the files (only for "text" files)

- tree .                      - show directory hierarchy (is not installed on many systems)

- code                 - launch the VSCode text editor program (if you've installed it)
- code [SOME_FILE]     - launch VSCode and open SOME_FILE
- code [SOME_DIRECTORY]     - launch VSCode with the "explorer" window set to SOME_DIRECTORY.
- code .   (there is a period there) - launch VSCode with the "explorer" window set to the current working directory.


### creating files using > and >>

- echo SOME_MESSAGE                - display the message
- echo SOME_MESSAGE > SOME_FILE    - put the message in the file (erase current contents of file)
- echo SOME_MESSAGE >> SOME_FILE   - append the message to the file

### creating/removing directories (aka folders)

- mkdir SOME_DIRECTORY            - "make" the specified directory
- rmdir SOME_DIRECORY    - "remove" directory (must be empty, NOTE also see rm command)

### BE CAREFUL WITH THE FOLLOWING COMMANDS

- rm SOME_FILES   - remvove the files (THERE IS NO WAY TO GET THEM BACK)
- if you are brave, you can research how to use rm to remove entire directories (that aren't empty)

### SOME MORE COMMANDS - search online for info about these

- wc - count words, lines, symbols in a file
- head   - show first few lines of a file
- tail   - show last few lines of a file
- sort
- uniq
- cut
- paste
- curl    - download files from the Internet
- touch SOME_FILE       - update the timestamp of the file OR create the file if it didn't exist
- less (or "more" depending on your system) - display the contents of a file one page at a time
- grep - search for a specific string of text in a file or multiple files
- find - search for files and directories in a file system
- chmod - change the permissions of a file or directory
- chown - change the ownership of a file or directory
- zip - compress a file or directory
- unzip - extract the contents of a compressed file
- gzip / gunzip   - zip/unzip Gnu types of zip files
- tar - create or extract a tar archive
- history - display a list of previously executed commands

