# <yrChapterNumber>9. </yrChapterNumber> tibbles and tribbles

## Introduction to Tibbles
```{r}
# Tibbles are part of the tibble package, which is included in tidyverse
# You can install/load tibble directly
if(!require(tibble)) {install.packages("tibble");require(tibble);}
# For more info see:
#
# help(package="tibble")
```

## What are Tibbles?
Tibbles are a modern reimagining of R's traditional data.frame. They are
designed to make working with data frames easier and more consistent.
Here's how to create a basic tibble:

### tibble() function is similar to data.frame() function

Create a tibble with the tibble function. It's use is very similar to how
you would use the data.frame function to create a dataframe (we're assuming
that you're familiar with creating dataframes in R)

```{r}
# Create a tibble directly
my_tibble = tibble(
  x = 1:3,
  y = letters[1:3],
  z = LETTERS[1:3]
)
my_tibble
```

### as_tibble() to convert data.frame or matrix to a tibble

```
# convert a dataframe to a tibble

df = data.frame(
  numbers = 1:3,
  letters = c("a", "b", "c")
)

tbl = as_tibble(df)
tbl

# convert a matrix to a tibble

mat = matrix(seq(10,120,by=10), nrow=3,ncol = 4) 
tbl = as_tibble(mat)
tbl
```

## Key Differences from data.frames

Tibbles have several important differences from traditional data.frames:

### Default Printing Behavior

```{r, render=knitr::opts_chunk$set(options(width = 60, tibble.print_max = 10, tibble.width = 60))}

# Create a wide tibble with many columns 25 rows.

health_data = tibble(
  patient_id = sprintf("P%04d", 1:25),
  admit_date = as.Date("2024-01-01") + sample(0:30, 25, replace = TRUE),
  age = sample(18:95, 25, replace = TRUE),
  heart_rate = round(rnorm(25, 75, 10)),
  blood_pressure_sys = round(rnorm(25, 120, 15)),
  blood_pressure_dia = round(rnorm(25, 80, 10)),
  temperature = round(rnorm(25, 98.6, 0.5), 1),
  oxygen_saturation = round(rnorm(25, 98, 2)),
  cholesterol = round(rnorm(25, 190, 30)),
  glucose = round(rnorm(25, 100, 20)),
  weight_kg = round(rnorm(25, 70, 15), 1),
  height_cm = round(rnorm(25, 170, 10))
)

# Tibbles show only the first 10 rows by default
# and only columns that fit on screen
health_data

# Compare to data.frame which tries to print everything
as.data.frame(health_data)
```


## Printing More Rows/Columns of a Tibble

```{r, render=knitr::opts_chunk$set(options(width = 60, tibble.print_max = 10, tibble.width = 60))}
# By default, print() shows 10 rows. Use n= to show more rows
print(health_data, n = 20)  # Shows 20 rows

# To see all rows
print(health_data, n = Inf)
```


<!-- DOESN'T WORK - may have been hallucinated 

```{r, render=knitr::opts_chunk$set(options(width = 60, tibble.print_max = 20, tibble.width = 60))}
# You can also set this globally for your R session:
options(tibble.print_max = 20)  # Now all tibbles will show 20 rows
health_data

# Reset back to default
options(tibble.print_max = 10)
```

-->

### Controlling Column Width

```{r, render=knitr::opts_chunk$set(options(width = 75, tibble.print_max = 10, tibble.width = 60))}
# width argument to print specifies the number of characters that should
# be printed in the widest row. In effect, this limits the number of columns
# being output to those columns that fit in the specified width.
print(health_data, width = 75)
```

```{r, render=knitr::opts_chunk$set(options(width = 1000, tibble.print_max = 10, tibble.width = 60))}
# Show all columns by setting width to Inf
print(health_data, width = Inf)
```

<!-- DOESN'T WORK - may have been hallucinated 

```{r, render=knitr::opts_chunk$set(options(width = 1000, tibble.print_max = 10, tibble.width = 60))}
# Or set globally:
options(tibble.width = Inf)
health_data
```

```{r, render=knitr::opts_chunk$set(options(width = 60, tibble.print_max = 10, tibble.width = 60))}
# Reset to default
options(tibble.width = NULL)
```

-->

<!--
THIS IS NO LONGER AN ISSUE WITH DATAFRAMES - PERHAPS MODIFY THIS TO 
MENTION THAT THIS IS AN ISSUE FOR OLDER R VERSIONS?
YRTODO SEE ABOVE.

### Factor Conversion
```{r}
# data.frames automatically convert strings to factors
df_strings = data.frame(
  x = c("apple", "banana", "cherry"),
  y = c("red", "yellow", "red")
)
str(df_strings)  # Note that x and y are factors

# Tibbles keep strings as characters
tbl_strings = tibble(
  x = c("apple", "banana", "cherry"),
  y = c("red", "yellow", "red")
)
str(tbl_strings)  # x and y remain character vectors
```

-->

### Row Names

```{r}
# data.frames can have row names
df_rownames = data.frame(
  x = 1:3,
  y = letters[1:3],
  row.names = c("row1", "row2", "row3")
)
df_rownames

# Tibbles don't support row names
# If you convert a data.frame with row names to a tibble,
# the row names become a regular column called 'rowname'
as_tibble(df_rownames, rownames = "id")
```

## Creating Tibbles

You can create tibbles in several ways:
```{r}
# Using tibble()
t1 = tibble(
  x = 1:5,
  y = x * 2,  # Note: you can refer to columns created earlier
  z = letters[1:5]
)
t1
```

## creating tibble row by row using tribbles 

While reading the raw code for creating a dataframe or a tibble, it can be 
challenging to visualize what the actual dataframe/tibble will look like. This
is because when typing the data into the code, each column is typed horrizontally
instead of vertically. For example:

```
# Using tribble() for transposed input
# Useful for small, manual data entry
stuff = tribble(
  col1 = c("a",  "b",   "c"),
  col2 = c( 1,    2,     3)
  col3 = c(TRUE, FALSE, TRUE))

# The code above lays out columns horizontally. 
# The actual dataframe displays columns vertically.
stuff
```

A "tribble" (i.e. TRansposed tIBBLE) is just a 
different way of typing the code that becomes a tibble.
Each column heading is prefixed with a tilde (~). 
The columns can be laid out vertically in the code, making
the code much more readable. See the example below.

```
# Using tribble() for transposed input
# Useful for small, manual data entry
stuff = tribble(
  ~col1, ~col2, ~col3,
  "a",   1,     TRUE,
  "b",   2,     FALSE,
  "c",   3,     TRUE
)

# The following looks much more similar to the code that created it.
stuff
```

## Converting Between Tibbles and data.frames
```{r}
# Convert data.frame to tibble
df = data.frame(
  x = 1:3,
  y = letters[1:3]
)
tbl = as_tibble(df)

# Convert tibble back to data.frame
df_again = as.data.frame(tbl)

# Check classes
class(tbl)
class(df_again)
```


## Other differences between tibbles and dataframes

### Variable Names and Subsetting

```{r}
# data.frames modify non-syntactic names
df_names = data.frame(
  `1` = 1:3,
  `2+2` = 4:6,
  check.names = TRUE  # default behavior
)
names(df_names)  # Names are modified

# Tibbles preserve original names
tbl_names = tibble(
  `1` = 1:3,
  `2+2` = 4:6
)
names(tbl_names)  # Original names kept

# Subsetting differences
# data.frame allows partial matching of variable names
df = data.frame(numbers = 1:3, letters = c("a", "b", "c"))
df$num  # Partial matching works

# Tibbles require exact matching
tbl = tibble(numbers = 1:3, letters = c("a", "b", "c"))
try(tbl$num)  # This will raise an error
```

